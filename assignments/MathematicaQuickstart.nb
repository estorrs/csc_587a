(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    150605,       3594]
NotebookOptionsPosition[    127155,       3231]
NotebookOutlinePosition[    128076,       3262]
CellTagsIndexPosition[    127989,       3257]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.7129969101987333`*^9},ExpressionUUID->"f4e321e7-8a3f-4112-8a72-\
e114f44ce6fb"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Quickstart Guide"
}], "Title",
 CellChangeTimes->{{3.583164813062953*^9, 
  3.583164820794673*^9}},ExpressionUUID->"211e0997-10db-4dba-a9ac-\
db9007c81901"],

Cell[CellGroupData[{

Cell["Instructions for this assignment", "Section",
 CellChangeTimes->{{3.774198531108274*^9, 
  3.774198535683736*^9}},ExpressionUUID->"e951116b-52c3-4fb9-8836-\
08d22bccf70b"],

Cell["\<\
As you read, evaluate all input cells and make sure you understand why the \
output is what it is. When you turn in this notebook, all input cells must \
have corresponding output cells showing that you evaluated them. In addition, \
you must have typed something for each exercise, regardless of whether you \
were able to get it correct. \
\>", "Text",
 CellChangeTimes->{{3.774198679607559*^9, 
  3.7741986953427877`*^9}},ExpressionUUID->"f2fc3daa-9c0d-4025-b38c-\
2c89ecc4b2d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notebooks and cells", "Section",
 CellChangeTimes->{{3.583164854286798*^9, 
  3.583164857372426*^9}},ExpressionUUID->"49f11fa7-3dbe-4560-97fc-\
c9b239e1bd76"],

Cell[CellGroupData[{

Cell["Videos", "Subsection",
 CellChangeTimes->{{3.6476165037963667`*^9, 
  3.647616505862584*^9}},ExpressionUUID->"f5620567-e392-44cc-9763-\
2fd139e83424"],

Cell["\<\
Please make sure you do the entire notebook below. If you like video \
instruction, feel free to also watch any of the videos found at 
http://www.wolfram.com/broadcast/screencasts/handsonstart/ 

\[OpenCurlyDoubleQuote]Notebooks\[CloseCurlyDoubleQuote] overlaps with the \
information provided in this section, \[OpenCurlyDoubleQuote]Notebooks and \
cells\[CloseCurlyDoubleQuote]. Some of the other videos overlap significantly \
with information provided below or in other assigned notebooks.\
\>", "Text",
 CellChangeTimes->{{3.6476165093103237`*^9, 3.647616589847036*^9}, {
  3.647616828740087*^9, 3.6476168327800913`*^9}, {3.647616933770933*^9, 
  3.647617018368287*^9}, {3.647617083352179*^9, 
  3.647617134690634*^9}},ExpressionUUID->"3d07da31-e372-49dc-ad10-\
eae3ef3376d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Interacting with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " through the notebook interface"
}], "Subsection",
 CellChangeTimes->{{3.6476165037963667`*^9, 3.647616505862584*^9}, {
  3.647617071990423*^9, 3.6476170762854443`*^9}, {3.6476174716886044`*^9, 
  3.647617480835166*^9}},ExpressionUUID->"a47ab05f-f86b-4f8e-bbd9-\
825f8ddce9cf"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" is split into two parts: the front-end and the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["kernel",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[".  You interact with ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" through the front end with a document called a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["notebook",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[".   A notebook consists of a series of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["cells",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". Textual cells contain static text, whether it be a document \
title, section title, or the text you are reading right now. This is the word \
processor part. You can use it for creating documents like this one, but you \
can also use it just for documenting your calculations or keeping notes to \
yourself as you do exploratory data analysis. Input cells contain stuff that \
you want to send to the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" kernel, which does the computations. Once the contents of an \
input cell is sent to the kernel (i.e. evaluated), the output of the \
computation (if any) is displayed in an output cell. For example, here is an \
input cell and the corresponding output cell.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583164924598127*^9, 3.583165293091897*^9}, {
   3.583165364072296*^9, 3.583165430028685*^9}, {3.5841267463099813`*^9, 
   3.584126754083334*^9}, {3.584126941785578*^9, 3.5841270557498493`*^9}, {
   3.584127086096953*^9, 3.58412709793601*^9}, {3.584127134417687*^9, 
   3.584127148799851*^9}, {3.5844474424331493`*^9, 3.5844474555138483`*^9}, {
   3.5844477811035223`*^9, 3.584447784806389*^9}, {3.584449857313232*^9, 
   3.584449942802973*^9}, 3.5844500619754457`*^9, {3.584450986849249*^9, 
   3.584451127304884*^9}, {3.584451267602113*^9, 3.584451272846917*^9}, 
   3.584465979527135*^9, 3.5844660446637373`*^9, 3.6177418065391293`*^9, {
   3.647617185086385*^9, 
   3.647617193983656*^9}},ExpressionUUID->"d73dea62-a679-4216-b56e-\
6a0573061183"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "+", "2"}], ")"}], 
  RowBox[{"(", 
   RowBox[{"x", "+", "1"}], ")"}]}]], "Input",
 CellLabel->
  "(K2) In[1]:=",ExpressionUUID->"50a84a43-4f2c-408f-aa08-b8710ecbb95b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"1", "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", "x"}], ")"}]}]], "Output",
 CellChangeTimes->{3.6177945395475273`*^9},
 CellLabel->
  "(K2) Out[1]=",ExpressionUUID->"b89267f6-d81a-4916-a8da-e2d2aca79ed5"]
}, Open  ]],

Cell[TextData[{
 "First, notice that the input and output cells are identified by cell labels \
at the left. Second, notice that the kernel didn\[CloseCurlyQuote]t have much \
to say about this input, besides that it prefers to have the terms of \
polynomials ordered from lowest degree to highest. That\[CloseCurlyQuote]s \
because there isn\[CloseCurlyQuote]t any obviously better or simpler form for \
this expression than the form we provided it in. We can specifically ask ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " t",
 StyleBox["o expand this out using the built-in function ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Expand",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[":",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583165485260301*^9, 3.5831658032038393`*^9}, {
   3.583235011789505*^9, 3.583235013921494*^9}, {3.583235052895368*^9, 
   3.5832350549933567`*^9}, 3.583236747525358*^9, {3.584128650434618*^9, 
   3.584128650799868*^9}, 3.584133046697221*^9, {3.584447488585433*^9, 
   3.584447532519273*^9}, {3.584447787847417*^9, 3.5844477883346167`*^9}, {
   3.5844483686197023`*^9, 
   3.5844483758819237`*^9}},ExpressionUUID->"ed2a9c1d-76c5-409e-b769-\
6d1eab95b646"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "2"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"x", "+", "1"}], ")"}]}], "]"}]], "Input",
 CellLabel->
  "(K2) In[2]:=",ExpressionUUID->"10e403b7-f49f-4808-8e5b-8950145136a3"],

Cell[BoxData[
 RowBox[{"2", "+", 
  RowBox[{"3", " ", "x"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.617794560181785*^9},
 CellLabel->
  "(K2) Out[2]=",ExpressionUUID->"0d514ac1-01e4-4a7d-b694-92ada072c724"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Creating and evaluating cells\[AliasDelimiter]", \
"Subsubsubsection",
 CellChangeTimes->{
  3.583241205964045*^9, {3.5833462197848043`*^9, 3.583346222370586*^9}, 
   3.5841278128341293`*^9, {3.58412786836483*^9, 3.5841278873743134`*^9}, 
   3.584127920504959*^9, {3.5844475594094057`*^9, 3.584447562079818*^9}, {
   3.58444779096729*^9, 3.5844477933339977`*^9}, 
   3.5844495200038347`*^9},ExpressionUUID->"c384d41d-25d6-4b91-a177-\
e6d35bd71d72"],

Cell[TextData[{
 "Now you try it. Create a new cell directly below this one, either by using \
the down arrow key to move below the current cell or by clicking the mouse \
between this cell and the next. In your new cell, type the function ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " followed by matching open and close square brackets, then between the \
square brackets type the result of the ",
 StyleBox["Expand",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " above, ",
 Cell[BoxData[
  RowBox[{"2", "+", 
   RowBox[{"3", " ", "x"}], "+", 
   RowBox[{"x", "^", "2"}]}]],
  CellChangeTimes->{3.58316583117238*^9},
  FontColor->GrayLevel[0],ExpressionUUID->
  "e50f8e32-39b9-419a-80fd-37d7808f4199"],
 StyleBox[". Since you are typing in an input cell (the default) your typing \
should come out in ",
  FontColor->GrayLevel[0]],
 StyleBox["Courier",
  FontFamily->"Courier",
  FontColor->GrayLevel[0]],
 StyleBox[" font, like the input cells shown above. To send it to the ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" kernel for evaluation, make sure your cursor is somewhere in the \
cell you want to evaluate, hold down the shift key, and press return. You \
should instantly get ",
  FontColor->GrayLevel[0]],
 StyleBox["(1+x)(2+x)",
  FontFamily->"Courier",
  FontColor->GrayLevel[0]],
 StyleBox[", i.e., a fac",
  FontColor->GrayLevel[0]],
 "tored form of ",
 Cell[BoxData[
  RowBox[{"2", "+", 
   RowBox[{"3", " ", "x"}], "+", 
   SuperscriptBox["x", "2"]}]],
  CellChangeTimes->{3.58316583117238*^9},ExpressionUUID->
  "0318ffbf-c6cd-4498-8ed5-30f2c0b9e43c"],
 " in an output cell. Below that, make a new cell by using the down arrow and \
convert it to a text cell by the menu sequence Format -> Style -> Text. (A \
faster way to do this is to hold down the Alt or Command key and press 7). \
Now when you type, you should get a sans serif font like the one this text is \
in. Please enter a comment on how the result from ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " compares to the input we originally gave to ",
 StyleBox["Expand",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.583165870732098*^9, 3.583166121099568*^9}, {
   3.5831756447422857`*^9, 3.583175717748807*^9}, {3.583175829117854*^9, 
   3.583175862380364*^9}, {3.583175893380278*^9, 3.583176103468589*^9}, {
   3.583176135468492*^9, 3.583176282710209*^9}, {3.583236818277836*^9, 
   3.583236822497311*^9}, {3.583236855109214*^9, 3.583236876610025*^9}, {
   3.5833462784716663`*^9, 3.5833463457061243`*^9}, {3.583425934746427*^9, 
   3.583425946378171*^9}, {3.584127547833528*^9, 3.584127550096912*^9}, {
   3.584127654475884*^9, 3.584127661197666*^9}, 3.584128169048728*^9, {
   3.584447426577335*^9, 3.58444742864212*^9}, {3.5844476144929953`*^9, 
   3.5844476251875467`*^9}, {3.584447795531479*^9, 3.584447800390973*^9}, 
   3.584448128849823*^9, {3.617741940801456*^9, 3.617741942056499*^9}, {
   3.64761732856791*^9, 
   3.647617329480071*^9}},ExpressionUUID->"917da560-9ef5-4b25-be40-\
0ac8945c73c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Creating, using, and saving a new notebook ", \
"Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
   3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
   3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, 
   3.584127826015929*^9, {3.5841279253004704`*^9, 3.584127950559352*^9}, 
   3.5841285647554817`*^9, 
   3.584449399115344*^9},ExpressionUUID->"f099f445-e0bd-4332-9e92-\
e9eccc81a9c8"],

Cell[TextData[{
 "Whenever you start something new, you\[CloseCurlyQuote]ll want to create a \
new notebook. You can do that when you first open ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from the top left of the welcome screen, or if you\[CloseCurlyQuote]re in \
the middle of a session, by the menu sequence File -> New -> Notebook. Create \
a new notebook, then do the following"
}], "Text",
 CellChangeTimes->{{3.5832372570807*^9, 3.583237368865171*^9}, {
  3.5832374228254557`*^9, 3.5832374302256737`*^9}, {3.583241539467763*^9, 
  3.583241548632917*^9}, {3.5832415930256147`*^9, 3.583241622320819*^9}, {
  3.58324501032955*^9, 3.5832450136407557`*^9}, {3.5833463858602743`*^9, 
  3.58334638847545*^9}, {3.584128019184778*^9, 
  3.5841280211592827`*^9}},ExpressionUUID->"7c1c35fd-9053-4f22-879b-\
953648025da9"],

Cell[CellGroupData[{

Cell["\<\
Go to the Palettes menu and select \[OpenCurlyDoubleQuote]Writing Assistant\
\[CloseCurlyDoubleQuote]. This palette serves more-or-less as a word \
processing menu that allows you to do the usual things, like choosing font \
sizes and colors, paragraph style, etc. One of the main differences with an \
ordinary word processor is that the document is organized in cells so there \
are ways to change cell properties, such as the background shading, as well \
as cell styles, which are collections of properties. Another difference is \
that formatting of mathematical expressions is very convenient via the \
\[OpenCurlyDoubleQuote]Typesetting\[CloseCurlyDoubleQuote] section of the \
palette.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, {
   3.5832451148251657`*^9, 3.583245159683543*^9}, {3.583346405325222*^9, 
   3.583346525490797*^9}, {3.5833465835750313`*^9, 3.58334668295181*^9}, {
   3.584447803166031*^9, 3.584447805198084*^9}, 
   3.584466206590352*^9},ExpressionUUID->"01ffee48-3d7e-4598-ad40-\
7489fdd17d1b"],

Cell[TextData[{
 "In your new notebook, use the Format -> Style to apply the Title style to \
the first cell and type into it to give your notebook a title, such as \
\[OpenCurlyDoubleQuote]Michael\[CloseCurlyQuote]s First ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Notebook\[CloseCurlyDoubleQuote]. "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, {
  3.5832451148251657`*^9, 3.583245159683543*^9}, {3.583346405325222*^9, 
  3.583346525490797*^9}, {3.5833465835750313`*^9, 3.5833468204259853`*^9}, {
  3.584994014089047*^9, 3.584994072845471*^9}, {3.681060458942458*^9, 
  3.681060459403037*^9}},ExpressionUUID->"ada033ab-8a09-4707-8821-\
f3a36e9c9e07"],

Cell[TextData[{
 "In your new notebook, create a new cell and compute the factorial of 101 by \
evaluating the expression ",
 StyleBox["101!",
  FontFamily->"Courier"],
 ". Then do the same for ",
 StyleBox["100!",
  FontFamily->"Courier"],
 ". Now divide the first result by the second. You can reference the previous \
results using the labels, such Out[1] or Out[2]. "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, 
   3.5832451148251657`*^9, {3.583346537678335*^9, 3.583346548515272*^9}, {
   3.583346827950342*^9, 3.583346836619183*^9}, {3.583346922524437*^9, 
   3.583346931010233*^9}, {3.583346979372509*^9, 3.5833470978272057`*^9}, {
   3.583349915062324*^9, 3.583349935819065*^9}, {3.583350064117671*^9, 
   3.5833500654456053`*^9}, 3.583350157965242*^9, {3.584993725806117*^9, 
   3.584993732151127*^9}},ExpressionUUID->"8dee411b-0917-41b3-8d6a-\
ff1cdf105704"],

Cell[TextData[{
 "Use the menu sequence File -> Save and save your notebook as a file called \
FirstNotebook-Name where \[OpenCurlyDoubleQuote]Name\[CloseCurlyDoubleQuote] \
is your name. Now ",
 StyleBox["double-",
  FontColor->RGBColor[0., 0., 0.]],
 "clicking on this file should open it up in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.5832450827931128`*^9}, {
   3.583350275298986*^9, 3.583350432794273*^9}, {3.583425967027441*^9, 
   3.58342596703082*^9}, 3.5841283009990463`*^9, 
   3.5841283564725227`*^9},ExpressionUUID->"7b36a254-e13a-4013-8293-\
8eb2f65c2b19"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to think about Notebooks", "Subsection",
 CellChangeTimes->{{3.583350467683083*^9, 
  3.583350488058688*^9}},ExpressionUUID->"4cf870a1-2da9-4a26-bf14-\
57d363afb5ee"],

Cell[TextData[{
 "Most people think about programming in terms of writing code in one file, \
then either compiling the file into something you can run from a command line \
or loading it into an interactive interpreter, where you can call each of the \
individual functions you\[CloseCurlyQuote]ve defined and see the result. One \
of the possible uses of a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook is as an interpreter for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions. To stick most closely to the normal model, you would write \
your code in a separate file, which typically has the extension \
\[OpenCurlyDoubleQuote].m\[CloseCurlyDoubleQuote] and is referred to in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation as a e",
 StyleBox["ither a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["script file",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" or a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["package file",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" (the difference is not important for now). Recently, they have \
rebranded the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" programming language as the Wolfram Language so you may see that \
terminology, too. Y",
  FontColor->RGBColor[0., 0., 0.]],
 "ou can edit the file using a text editor such as ",
 StyleBox["Emacs",
  FontFamily->"Courier"],
 " or ",
 StyleBox["Vi",
  FontFamily->"Courier"],
 ", or you can use Wolfram Workbench, an IDE (Integrated Development \
Environment) based on the open-source Eclipse. In this class, we strongly \
encourage development in Workbench. \n\nYou can develop code in Workbench and \
use a notebook as the interpreter. If you use a new notebook cell for each \
interaction and save your notebook at the end, all the interactions are saved \
for later reference. Often most of them are not worth saving because you\
\[CloseCurlyQuote]re just trying to figure out how to get something to work \
and once it does the failed attempts are no longer useful. Thus, it is often \
worthwhile to reuse the same input cell, editing and reevaluting it until you \
get a result you want to save. The output from each evaluation of a cell will \
overwrite the output of the previous evaluation. It\[CloseCurlyQuote]s also \
worth deleting some of the less interesting cells you\[CloseCurlyQuote]ve \
created at the end of the session. "
}], "Text",
 CellChangeTimes->{{3.5833505020273438`*^9, 3.583350721483019*^9}, {
   3.5833508489190807`*^9, 3.583350906402923*^9}, {3.583425115125099*^9, 
   3.583425290931264*^9}, {3.5834254234269743`*^9, 3.5834254700104647`*^9}, {
   3.583425531778398*^9, 3.583425532866619*^9}, {3.583425566563981*^9, 
   3.583425920274268*^9}, {3.583426001339323*^9, 3.583426021062698*^9}, {
   3.583498895250642*^9, 3.5834989141294413`*^9}, {3.5841285113923683`*^9, 
   3.5841285291028023`*^9}, 3.584447767087306*^9, {3.584447814559413*^9, 
   3.5844478243743677`*^9}, {3.584448130523559*^9, 3.5844481364759703`*^9}, 
   3.5844662940220747`*^9, {3.584466426509294*^9, 3.5844667080498238`*^9}, {
   3.5846407870566673`*^9, 3.5846408636387672`*^9}, {3.584640898434252*^9, 
   3.584640905366434*^9}, 3.584993801677109*^9, {3.58548897226451*^9, 
   3.585489085363*^9}, {3.647617540972906*^9, 
   3.647617571004573*^9}},ExpressionUUID->"611c0c51-096d-4ba4-b207-\
4933afae9811"],

Cell[CellGroupData[{

Cell["Practice: Reusing a notebook cell", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 
  3.58342604629023*^9}},ExpressionUUID->"6e00bed1-c212-4385-bb2d-\
d19c05756d06"],

Cell[TextData[{
 StyleBox["The following computation creates a list, or table, of the exact \
values of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x Log2[x]",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" for several values of x. Place your cursor in the cell below and \
use shift-return to evaluate it.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.5841286853046713`*^9, 3.584128700095504*^9}, {
  3.584128810813657*^9, 3.5841288661501083`*^9}, {3.584128919970653*^9, 
  3.584128937362607*^9}, {3.584129161785049*^9, 3.584129167893005*^9}, {
  3.617746329904718*^9, 
  3.6177463664912453`*^9}},ExpressionUUID->"8ed6bdbe-b12b-40d3-8e59-\
730a870c4846"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", " ", 
    RowBox[{"Log2", "[", "x", "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "1", ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.583426067539361*^9, 3.58342613857296*^9}, {
  3.583426497035657*^9, 3.583426503619988*^9}, {3.583426537757368*^9, 
  3.583426543420322*^9}},
 CellLabel->
  "(K2) In[3]:=",ExpressionUUID->"e2c11ca2-3514-4216-97be-95f11988c487"],

Cell[TextData[{
 "S",
 StyleBox["uppose you wanted the numbers expressed as floating point \
approximations, rather than ratios of natural logarithms. To do so, you need \
to wrap the function ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" around the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x ",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Log2",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["[x]",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". Edit the contents of the input cell above so that you will get \
floating point approximatio",
  FontColor->RGBColor[0., 0., 0.]],
 "ns and use shift-return to evaluate it. Note how the new output overwrites \
the old. Now create a new text cell between the output and this paragraph and \
write a comment in red (you can change the font color using the Writ",
 StyleBox["ing Assistant pal",
  FontColor->GrayLevel[0]],
 "ette) regarding the effect of the second argument we gave to ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ", namely, ",
 StyleBox["{x, 1, 10}",
  FontFamily->"Courier"],
 ". If you\[CloseCurlyQuote]re not sure, you can either experiment or you can \
look up  the documentation on ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " by using the menu sequence Help -> Wolfram Documentation and typing ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " into the search bar. \[FilledSquare]"
}], "Text",
 CellChangeTimes->{{3.583426184693366*^9, 3.583426339971405*^9}, {
  3.5834264158130627`*^9, 3.583426445690782*^9}, {3.5834264776145144`*^9, 
  3.5834264929469147`*^9}, {3.5834265557410107`*^9, 3.583426663794897*^9}, {
  3.583426708555833*^9, 3.583426767882607*^9}, {3.58342685475268*^9, 
  3.5834269609407787`*^9}, {3.583499286870441*^9, 3.583499305489765*^9}, {
  3.584128970435548*^9, 3.58412902648272*^9}, {3.584129094396899*^9, 
  3.584129096268752*^9}, {3.584466798695335*^9, 3.584466810428084*^9}, {
  3.5849938779400387`*^9, 3.584993891369049*^9}, {3.617746408020062*^9, 
  3.617746428593288*^9}},ExpressionUUID->"36bbd998-1d9e-45bb-862b-\
b8f7c18d235a"],

Cell["\<\
To delete a cell, or change anything about its formatting, you must select \
the cell by selecting the innermost bracket to the right of the cell. Cells \
are organized into a hierarchical structure which is indicated by the \
bracketing at right, so if you want you can select higher level cells such as \
the one for an entire section or subsection of a notebook.\
\>", "Text",
 CellChangeTimes->{
  3.585489093252442*^9},ExpressionUUID->"6ba3a706-aa1e-4827-b010-\
89a3d7da1b32"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Selecting cells", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.5854898764212112`*^9, 
  3.585489879731243*^9}},ExpressionUUID->"14aad8f5-d57c-4146-b497-\
db6e199674db"],

Cell[TextData[StyleBox["Select this cell by clicking on the bracket to its \
right and delete it without deleting any other cells.",
 FontColor->RGBColor[1, 0, 0]]], "Text",
 CellChangeTimes->{{3.5854899328398457`*^9, 
  3.585489961491809*^9}},ExpressionUUID->"181e6174-0ace-46e0-9ef4-\
8572face0752"],

Cell["\<\
Select this cell and then use the \"Format\" dropdown menu to format it as an \
input cell.\
\>", "Text",
 CellChangeTimes->{{3.5854899883960457`*^9, 
  3.585490055068061*^9}},ExpressionUUID->"1ff1ec24-2d97-4842-8c0a-\
841cb03e477b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation"
}], "Section",
 CellChangeTimes->{{3.583498969278222*^9, 3.5834989897771177`*^9}, {
  3.58349909157749*^9, 3.583499099401623*^9}, {3.5834991543301697`*^9, 
  3.583499185841704*^9}, {3.5844478338392878`*^9, 
  3.5844478343669567`*^9}},ExpressionUUID->"b14fc5f4-560e-456c-9262-\
1f5557a16aac"],

Cell[TextData[{
 StyleBox["Your ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" installation comes with vast amounts of documentation. To access \
it, use the menu sequence Help -> Wolfram Documentation. The most important \
thing in the Wolfram Documentation is the search bar at the top. You can \
think of this as a web browser. Type in whatever it is you want to know \
about, look over the list of pages that comes back, and start reading the \
ones that look promising. You will do this many times and spend a lot of time \
reading the documentation. This can be a frustrating process because you will \
often get a lot of reference information but not the introduction to the big \
concepts needed to understand the system. All I can say is, \
\[OpenCurlyDoubleQuote]I\[CloseCurlyQuote]m sorry\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Get used to it\[CloseCurlyDoubleQuote]. I will try to \
fill in the big concepts whenever I can, but you should expect to spend a \
fair amount of time being confused and a fair amount of time browsing from \
one help page to another trying to get a foothold. \n",
  FontColor->RGBColor[0., 0., 0.]],
 "\nThere are several categories of documentation pages, including"
}], "Text",
 CellChangeTimes->{{3.583499220337791*^9, 3.5834992658978987`*^9}, {
  3.583499319121522*^9, 3.5834995099774446`*^9}, {3.5834995569935427`*^9, 
  3.5834996335938377`*^9}, {3.583499666310273*^9, 3.583499742578568*^9}, {
  3.584129198880324*^9, 3.584129240973604*^9}, {3.584129309205097*^9, 
  3.584129310252326*^9}, {3.584447839453771*^9, 3.584447839662661*^9}, {
  3.584447890494486*^9, 3.58444790072674*^9}, {3.5844521362846327`*^9, 
  3.584452137097991*^9}, {3.584466895775999*^9, 3.584466908479267*^9}, {
  3.584994206548884*^9, 
  3.584994220262559*^9}},ExpressionUUID->"33d39dfb-32d4-4e76-874b-\
1c0d9771f893"],

Cell[CellGroupData[{

Cell[TextData[{
 "Tutorials. These are ve",
 StyleBox["ry useful and",
  FontColor->GrayLevel[0]],
 " include some of the basic concepts you will need. I suggest reading a \
tutorial first whenever you can find a relevant one.  You can see an example \
by going to the doc center, typing or pasting ",
 StyleBox["tutorial/InterruptingCalculations",
  FontFamily->"Courier"],
 " into the search bar, and pushing return."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499796701165*^9}, {
  3.583500289423687*^9, 3.583500342077166*^9}, {3.5841293555192137`*^9, 
  3.584129355669614*^9}, {3.712996920901553*^9, 
  3.7129969209019814`*^9}},ExpressionUUID->"0915695c-e601-44cb-87b2-\
0158d3af9d67"],

Cell[TextData[{
 "How Tos. You can see an example by going to the doc center, typing or \
pasting ",
 StyleBox["howto/StopAComputation",
  FontFamily->"Courier"],
 " into the search bar, and pushing return. Unfortunately, simply typing in \
\[OpenCurlyDoubleQuote]How to stop a computation\[CloseCurlyDoubleQuote] \
draws a blank."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801077017*^9}, {
  3.583499862105481*^9, 3.583499866289667*^9}, {3.583500022258106*^9, 
  3.583500025057375*^9}, {3.583500090219466*^9, 
  3.583500193945484*^9}},ExpressionUUID->"2934ba54-4a6a-4e76-bdda-\
1e8fe1c5108b"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " guides."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801073547*^9}, {
   3.583499867801257*^9, 3.5834998747398853`*^9}, {3.584129625142061*^9, 
   3.5841296418187513`*^9}, 3.58444814607749*^9, {3.5844522045208483`*^9, 
   3.584452204705892*^9}},ExpressionUUID->"9aa6fdf6-1c02-4ebd-aff5-\
80c71e26ba4d"],

Cell[TextData[{
 "Reference material, especially on built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions and symbols. The reference pages for built-in functions (e.g. ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ") have a fixed structure. In the search bar at the top of the doc center or \
any other documentation page, search ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " now -- the reference page should display right away."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801073547*^9}, {
   3.583499867801257*^9, 3.5834999287538757`*^9}, {3.5834999684104567`*^9, 
   3.583499992074588*^9}, {3.583500649906506*^9, 3.583500654378336*^9}, {
   3.583500692564271*^9, 3.583500926121484*^9}, {3.5835010387953663`*^9, 
   3.583501045921648*^9}, {3.583501096007538*^9, 3.583501187146337*^9}, {
   3.5835012571617393`*^9, 3.5835014416334763`*^9}, {3.5835015669703503`*^9, 
   3.5835016694256783`*^9}, {3.584130141084016*^9, 3.584130142762987*^9}, {
   3.584447947631198*^9, 3.584447947829571*^9}, {3.584467013382531*^9, 
   3.5844670138042*^9}, {3.584467087201333*^9, 3.584467094604373*^9}, 
   3.584994289862949*^9, 
   3.5849943438016148`*^9},ExpressionUUID->"f437c261-c00c-4d1c-aba3-\
6816afdf01ff"],

Cell[CellGroupData[{

Cell["\<\
In large, black type you\[CloseCurlyQuote]ll see the title of the page, which \
is the name of the function.\
\>", "Subitem",
 CellChangeTimes->{
  3.584994358023192*^9},ExpressionUUID->"d520828f-bcb9-4cc7-9e2e-\
71e8ffce098e"],

Cell["\<\
Above that, and to the right, are drop-down menus for accessing related \
documentation by type -- in this case, there is a menu listing several \
related tutorials, another one listing guides, and a \
\[OpenCurlyDoubleQuote]See Also\[CloseCurlyDoubleQuote] which lists related \
reference pages. Quite often, it will be worth your while to look at the \
guides and tutorials before reading reference pages, although sometimes the \
reference pages will give you what you want faster. You\[CloseCurlyQuote]ll \
have to develop your own personal documentation reading style over time. \
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 
  3.584994416022517*^9}},ExpressionUUID->"5f433ade-ff44-446d-a21f-\
d8ed23ec1749"],

Cell["\<\
Below the title you\[CloseCurlyQuote]ll see one or more cells with yellow \
backgrounds, each showing a template for how you can call the function with \
various argument types and a very brief description of what each one does. \
This is useful mainly if you already know one way to use the function and you\
\[CloseCurlyQuote]re looking for variants. \
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 
  3.584994436339147*^9}},ExpressionUUID->"d700b297-136f-4bff-9595-\
cb36d48a79f2"],

Cell["\<\
Below the yellow boxes is a section called Details which is closed by \
default. More often than not, you\[CloseCurlyQuote]ll want to leave that \
closed until you\[CloseCurlyQuote]ve looked at part of the next section, \
titled Examples.\
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 
  3.5849944522343693`*^9}},ExpressionUUID->"e4a5077b-1b36-4e61-8902-\
9c8675ad6a2c"],

Cell["\<\
The Examples section shows examples of what you can do with the function. In \
some cases you will be able to use these as templates for building your \
expressions. It is often useful to read through at least the subsection \
titled Basic Examples. I find that I am tempted to keep reading examples, but \
there are often a lot of them and it is not always as useful to read them all \
as to glance over the Details section and then look for related tutorials. \
However, if you know this is the function you want to use and you\
\[CloseCurlyQuote]re trying to do something complicated with it, reading all \
the examples can be helpful.\
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 
  3.5849944790117693`*^9}},ExpressionUUID->"93008e14-2abf-4f8f-9aa4-\
308dc1ac904b"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["You can also look up a function\[CloseCurlyQuote]s usage directly \
in a notebook by typing ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["?FunctionName",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[", where FunctionName is the name of the function.  For example, ",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.584130176322619*^9, 3.584130203407522*^9}, {
  3.584130248386215*^9, 3.584130311403799*^9}, {3.584130423341981*^9, 
  3.58413044904421*^9}},ExpressionUUID->"47d5e4a1-50ee-4469-a3b0-\
c99af8c7a44e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Table"}]], "Input",
 CellChangeTimes->{{3.584130337430429*^9, 3.58413033866642*^9}},
 CellLabel->
  "(K2) In[4]:=",ExpressionUUID->"fdde3c59-6cf3-4eb4-962d-5971348efd91"],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]], \\\"}\\\"}]}], \\\"]\\\"}]\\) generates a list of \
\\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\\) copies of \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \\n\
\\!\\(\\*RowBox[{\\\"Table\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\
\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) generates \
a list of the values of \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) when \
\\!\\(\\*StyleBox[\\\"i\\\", \\\"TI\\\"]\\) runs from 1 to \
\\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\\). \\n\\!\\(\\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) starts \
with \\!\\(\\*RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\"=\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]]}]\\). \\n\\!\\(\\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"di\\\", \
\\\"TI\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) uses steps \
\\!\\(\\*StyleBox[\\\"di\\\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"Table\\\
\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) \
uses the successive values \\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\), \
\\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\
\"TR\\\"]]\\), \[Ellipsis].\\n\\!\\(\\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\
\", RowBox[{StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"]\\\"}]\\) gives a nested list. The list \
associated with \\!\\(\\*StyleBox[\\\"i\\\", \\\"TI\\\"]\\) is \
outermost.\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.617794617779923*^9},
 CellTags->
  "Info3617776617-3499402",ExpressionUUID->"a43925ff-8dc3-4f77-b056-\
14068c1d2298"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Another resource for finding information on functions is with the \
Help->Function Navigator.  The Function Navigator lists a hierarchical view \
of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\[CloseCurlyQuote]s functions.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.5844523112009087`*^9, 3.584452425800301*^9}, {
   3.58445245649606*^9, 3.584452481848098*^9}, 
   3.584453575664426*^9},ExpressionUUID->"b583bd0d-c263-48ab-8d2f-\
6387459608dc"],

Cell[CellGroupData[{

Cell["Practice: Reading documentation 1", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583501688676094*^9, 3.583501695051704*^9}, {
  3.583502971350781*^9, 
  3.583502972452298*^9}},ExpressionUUID->"00795f31-aad2-4152-a778-\
9961f2b15c45"],

Cell[TextData[{
 "Go to the reference page for ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ". "
}], "Text",
 CellChangeTimes->{{3.583501950809888*^9, 3.583502008969513*^9}, {
   3.583502046666016*^9, 3.583502119217896*^9}, 
   3.58350221565024*^9},ExpressionUUID->"4347baea-71fd-474c-b5eb-\
b0016d3e0d23"],

Cell[CellGroupData[{

Cell[TextData[{
 "In a new text cell below this one, write the names of all the tutorials \
that are in the list of tutorials at the top of the page. You\
\[CloseCurlyQuote]ll have to change the style of your cell to \
\[OpenCurlyDoubleQuote]text\[CloseCurlyDoubleQuote] so it doesn\
\[CloseCurlyQuote]t ",
 StyleBox["get interpreted as an input cell.",
  FontColor->RGBColor[0., 0., 0.]]
}], "ItemNumbered",
 CellChangeTimes->{
  3.583502141516714*^9, {3.5835022022757874`*^9, 3.583502241313575*^9}, {
   3.584129904402978*^9, 3.584129937759644*^9}, {3.584130013679502*^9, 
   3.584130023561453*^9}, {3.584467486653377*^9, 
   3.584467487108156*^9}},ExpressionUUID->"74ced674-779d-4463-bec9-\
ac506e364bc1"],

Cell[TextData[{
 "Read the basic examples on the ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " reference page. In a new input cell below this one, write an expression \
using ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " that, when evaluated, outputs a list of the cubes of all the integers \
between 1 and 12, inclusive. (You can use the notation ",
 StyleBox["x^3",
  FontFamily->"Courier"],
 " for ",
 StyleBox["x",
  FontFamily->"Courier"],
 " cubed.) In another new input cell, write an expression that uses ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " to list the cubes of the numbers 0.2, 0.3, ..., 0.7."
}], "ItemNumbered",
 CellChangeTimes->{
  3.583502141516714*^9, {3.5835022022757874`*^9, 3.583502220017521*^9}, {
   3.583502251985673*^9, 3.583502397075473*^9}, {3.5835025114893227`*^9, 
   3.583502533833376*^9}, {3.583504501577125*^9, 3.583504520712249*^9}, {
   3.58500423894077*^9, 
   3.585004276638291*^9}},ExpressionUUID->"46243fd1-de38-4f10-8f7a-\
ff410fcf757e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsection",
 CellChangeTimes->{{3.5835042889056587`*^9, 
  3.583504292690262*^9}},ExpressionUUID->"eab71766-9229-4b15-9081-\
710339ac5389"],

Cell[TextData[{
 "There\[CloseCurlyQuote]s no point to my trying to rewrite tutorials and \
documentation on all the stuff that\[CloseCurlyQuote]s already included in \
the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation. Instead, I will do some introducing, sequencing, and \
provision of relevant Practices and Exercises. In between these, I\
\[CloseCurlyQuote]ll ask you to read particular documentation pages as though \
they were incorporated into this document. That means as soon as you see a \
section titled \[OpenCurlyDoubleQuote]Incorporated reading,\
\[CloseCurlyDoubleQuote] you should go off and read whatever pages are \
referenced there, then come back and continue working with this document. \
Right now, please read  "
}], "Text",
 CellChangeTimes->{{3.583504310930181*^9, 3.5835044958021383`*^9}, 
   3.5850055601292667`*^9, 
   3.585005614623197*^9},ExpressionUUID->"fe32ca13-afb2-4482-9b93-\
980250bf3a60"],

Cell[TextData[{
 "howto/CreateLists. You can also get an html version of this page from a web \
browser at http://reference.wolfram.com/mathematica/howto/CreateLists.html. \
This site, which contains all the documentation with the obvious mapping to \
the URL, might occasionally be useful if you don\[CloseCurlyQuote]t have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " open or can\[CloseCurlyQuote]t open it for some reason."
}], "Item",
 CellChangeTimes->{{3.5835048546481113`*^9, 3.583504965298663*^9}, 
   3.5844506323481617`*^9},ExpressionUUID->"937e2571-dab2-436f-9dbd-\
39b83bd0d0e8"],

Cell[CellGroupData[{

Cell["Practice: Making lists and vectors", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 
  3.5835051472415533`*^9}},ExpressionUUID->"7f671825-feb8-44c0-91a6-\
c1882a429ab9"],

Cell[TextData[{
 StyleBox["From now on, do all assignments that are in ",
  FontSlant->"Plain"],
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 StyleBox[" notebooks by creating new cells immediately below the assignment, \
unless it is specified that they should be done in a new notebook. Save your \
modified copy of the notebook containing the assignments by appending a dash \
followed by your name to the end of the original filename, before the \
\[OpenCurlyDoubleQuote].nb\[CloseCurlyDoubleQuote] suffix. By affixing your \
name, you affirm that you typed any modifications to the original file \
yourself. Copying modified assignment files or portions thereof, or \
distributing them to others, or placing them in a location where others can \
easily grab them, is considered cheating. You can get help and advice, but \
you must do all the typing yourself.",
  FontSlant->"Plain"]
}], "Text",
 CellChangeTimes->{{3.583505589580686*^9, 3.583505751777648*^9}, {
  3.5835059370388203`*^9, 3.583505956274063*^9}, {3.583506110576619*^9, 
  3.5835062466814547`*^9}},
 FontSlant->"Italic",ExpressionUUID->"20d72488-3904-4027-ba52-a5a33074c2c2"],

Cell[CellGroupData[{

Cell[TextData[{
 "Make the same two lists of cubes you did with ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ", but now do it  with ",
 StyleBox["Range",
  FontFamily->"Courier"],
 ". As demonstrated in the \[OpenCurlyDoubleQuote]howto\
\[CloseCurlyDoubleQuote] for creating lists, use ",
 StyleBox["Range",
  FontFamily->"Courier"],
 " to create a list of numbers and then apply the cubing operation to the \
entire list."
}], "ItemNumbered",
 CellChangeTimes->{{3.583505152049571*^9, 3.583505152186013*^9}, {
  3.5835052216601667`*^9, 3.5835052824336643`*^9}, {3.5835053500348253`*^9, 
  3.583505395777787*^9}, {3.583505453420312*^9, 3.5835054612018013`*^9}, {
  3.5835055020678368`*^9, 
  3.583505520582569*^9}},ExpressionUUID->"4138b638-e9e8-4fbf-b8cc-\
25800c8ccc67"],

Cell["\<\
Create a \[OpenCurlyDoubleQuote]matrix\[CloseCurlyDoubleQuote] (i.e. list of \
lists) with 7 rows and 3 columns containing random integers between 17 and \
23. First display it as a list of lists, and then in matrix form.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583505152049571*^9, 3.583505152186013*^9}, {
  3.5835052216601667`*^9, 3.5835052824336643`*^9}, {3.5835053500348253`*^9, 
  3.583505395777787*^9}, {3.583505453420312*^9, 3.5835054612018013`*^9}, {
  3.5835055020678368`*^9, 3.5835055818654757`*^9}, {3.58350600830997*^9, 
  3.583506017305415*^9}, {3.58350770687451*^9, 
  3.58350770778542*^9}},ExpressionUUID->"63293e7a-c57e-4cea-876b-\
77687ab725c5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate all input cells", "Subsection",
 CellChangeTimes->{{3.583507948945867*^9, 3.583507957089349*^9}, {
  3.583508228873707*^9, 3.583508230665696*^9}, {3.617748393457794*^9, 
  3.617748435601356*^9}},ExpressionUUID->"bbc507b0-be6f-4f49-9d5e-\
2c380b42a088"],

Cell["\<\
From now on, wherever you see an input cell that does not have a \
corresponding output cell in a notebook I have distributed, you should \
evaluate it and look at the output. Make sure you understand why that input \
gave that output. If you forget to evaluate an input cell then future cells \
may not evaluate the way they are supposed to, so please check carefully for \
input cells and make sure to evaluate them.\
\>", "Text",
 CellChangeTimes->{{3.617748445395969*^9, 3.617748531286536*^9}, {
   3.617748808209343*^9, 3.617748864869157*^9}, 3.647618105546777*^9, 
   3.681061923427919*^9},ExpressionUUID->"aa2810f6-9a07-4930-8cdc-\
93002ef71688"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming in Mathematica", "Section",
 CellChangeTimes->{{3.5835078847461367`*^9, 
  3.583507893009742*^9}},ExpressionUUID->"f8d0b1d0-a789-4a34-b9a7-\
cf5f412f41a1"],

Cell[CellGroupData[{

Cell["Videos", "Subsection",
 CellChangeTimes->{{3.6476165037963667`*^9, 
  3.647616505862584*^9}},ExpressionUUID->"f05410dc-cdbb-4fd0-874a-\
bb340770a3dc"],

Cell["\<\
Please make sure you do the entire notebook below. If you like video \
instruction, feel free to also watch the video \[OpenCurlyDoubleQuote]Basic \
Calculations\[CloseCurlyDoubleQuote], which can be found at 
http://www.wolfram.com/broadcast/screencasts/handsonstart/ .\
\>", "Text",
 CellChangeTimes->{{3.6476165093103237`*^9, 3.647616589847036*^9}, {
  3.647616828740087*^9, 3.6476168327800913`*^9}, {3.647616933770933*^9, 
  3.647617018368287*^9}, {3.647617083352179*^9, 3.647617134690634*^9}, {
  3.647618159856917*^9, 
  3.647618196351369*^9}},ExpressionUUID->"d899599b-54d9-4cd8-9e58-\
dfa5d27902c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining variables and functions", "Subsection",
 CellChangeTimes->{{3.583507948945867*^9, 3.583507957089349*^9}, {
  3.583508228873707*^9, 
  3.583508230665696*^9}},ExpressionUUID->"c2ab6080-dad7-4524-8c78-\
80b8201a161b"],

Cell["\<\
In order to understand variables and functions, we need to touch briefly on \
how the kernel works. If you are used to interpreters in other languages, it \
works pretty much the same way. Apply built-in mathematical operations to \
numbers and you will get numbers back.\
\>", "Text",
 CellChangeTimes->{{3.5835082334192467`*^9, 
  3.583508347953382*^9}},ExpressionUUID->"18bd1706-9cda-4be2-8ac0-\
0e690eba8a2a"],

Cell[BoxData[
 RowBox[{"2", "^", "5"}]], "Input",
 CellLabel->
  "(K2) In[6]:=",ExpressionUUID->"de4b8606-710d-4864-a969-33aec65e6244"],

Cell[BoxData[
 RowBox[{"Log2", "[", "32", "]"}]], "Input",
 CellLabel->
  "(K2) In[7]:=",ExpressionUUID->"a4daa8f7-d33e-46e3-8f00-14126ed1f367"],

Cell["\<\
If you define variables, they will evaluate to the value you assigned them.\
\>", "Text",
 CellChangeTimes->{{3.5835083888285217`*^9, 3.58350843528144*^9}, {
  3.583590383999617*^9, 
  3.583590384561213*^9}},ExpressionUUID->"a6cdc6d5-ace7-44a5-b2e4-\
e3ebbfa28a72"],

Cell[BoxData[
 RowBox[{"x", "=", "6"}]], "Input",
 CellChangeTimes->{{3.583508438580459*^9, 3.583508440219294*^9}},
 CellLabel->
  "(K2) In[8]:=",ExpressionUUID->"5773eee0-c78b-4197-8ff4-6fae5661206c"],

Cell[BoxData[
 RowBox[{"2", "^", "x"}]], "Input",
 CellLabel->
  "(K2) In[9]:=",ExpressionUUID->"82b1bce5-562a-429b-a41f-f896dcc9e58c"],

Cell[TextData[{
 "However, one difference between the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel and many other interpreters is that it doesn\[CloseCurlyQuote]t \
complain about undefined variables. It simply treats them as variables, like \
in math. When you evaluate the following expressions, you will see that x \
evaluates to 6 but y is just the variable y."
}], "Text",
 CellChangeTimes->{{3.583508468959424*^9, 3.5835085354417953`*^9}, {
  3.5844480018375072`*^9, 3.5844480019581327`*^9}, {3.617748702875928*^9, 
  3.61774874956106*^9}, {3.681062037976863*^9, 
  3.681062039733163*^9}},ExpressionUUID->"218c4047-c6d5-48c2-a78e-\
fce934fa1563"],

Cell[BoxData[
 RowBox[{"x", "^", "y"}]], "Input",
 CellLabel->
  "(K2) In[10]:=",ExpressionUUID->"7cea6d63-4b0c-48b5-a635-e6906c1435cf"],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"y", "+", "x"}], ")"}], "^", "2"}], "]"}]], "Input",
 CellLabel->
  "(K2) In[11]:=",ExpressionUUID->"7b0eef62-7177-4437-8a29-26e806c375f3"],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"36", "+", 
     RowBox[{"12", " ", "y"}], "+", 
     SuperscriptBox["y", "2"]}], ")"}], " ", "/", " ", 
   RowBox[{"(", 
    RowBox[{"y", "+", "x"}], ")"}]}], "]"}]], "Input",
 CellLabel->
  "(K2) In[12]:=",ExpressionUUID->"76ec4e5f-ed89-42f4-a4f1-bfcdad6d455f"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t mind mixing defined and undefined variables. If \
they are defined they\[CloseCurlyQuote]re replaced by the assigned value and \
if not they\[CloseCurlyQuote]re not. This approach to undefined symbols hints \
at a deep conceptual difference between the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel and many familiar interpreters -- it is often better to think of \
Mathematica as a simplifier than an evaluator. It has certain rules for what \
it considers a simpler form of an expression, and by defining a variable as a \
number you make it aware of a new way to simplify expressions -- by \
substituting a particular number for that variable.\n\nAnother odd thing is \
that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t make as much of a deal about the difference \
between variables and functions as some languages do. You can define the \
value of a function on a particular input explicitly, as in: "
}], "Text",
 CellChangeTimes->{{3.5835088126746683`*^9, 3.583509199058846*^9}, {
  3.5844480139276543`*^9, 3.58444802830021*^9}, {3.584468419069387*^9, 
  3.584468423154972*^9}, {3.584468543054433*^9, 3.58446861001886*^9}, {
  3.681062092895645*^9, 
  3.681062116836618*^9}},ExpressionUUID->"e275c3b3-3885-42e2-b793-\
6ba80d65398f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myFunction", "[", "17", "]"}], "=", "23"}]], "Input",
 CellLabel->
  "(K2) In[13]:=",ExpressionUUID->"ab5812d3-f8e1-4a44-b1c2-41f5cf48e9f8"],

Cell[BoxData["23"], "Output",
 CellChangeTimes->{3.617795057259838*^9},
 CellLabel->
  "(K2) Out[13]=",ExpressionUUID->"7f75a60b-8227-41b9-8fb2-53bd58cd088b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"myFunction", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "15", ",", " ", "19"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "(K2) In[14]:=",ExpressionUUID->"9527246c-d979-4b21-b8ac-332ff1e13786"],

Cell[TextData[{
 "Notice how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " used the rule you gave it to simplify the expression ",
 StyleBox["myFunction[17]",
  FontFamily->"Courier"],
 ", but that didn\[CloseCurlyQuote]t affect its take on ",
 StyleBox["myFunction[16]",
  FontFamily->"Courier"],
 ", which is not defined as anything other than itself. You could also \
define"
}], "Text",
 CellChangeTimes->{{3.583509260130624*^9, 3.583509319514641*^9}, {
   3.58350941738881*^9, 3.583509459809867*^9}, {3.583509533082829*^9, 
   3.583509540689211*^9}, 
   3.6177488990947857`*^9},ExpressionUUID->"1ec5eadd-f966-4af0-a130-\
961807f1408c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myFunction", "[", "y", "]"}], "=", "79.4"}]], "Input",
 CellLabel->
  "(K2) In[15]:=",ExpressionUUID->"160be160-dfbb-4dab-a100-e8ffe3189e51"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"myFunction", "[", "x", "]"}], ",", " ", 
   RowBox[{"myFunction", "[", "y", "]"}], ",", " ", 
   RowBox[{"myFunction", "[", "z", "]"}]}], "}"}]], "Input",
 CellLabel->
  "(K2) In[16]:=",ExpressionUUID->"0fc0d2d0-3b0f-4346-a2ac-c069f5c4471d"],

Cell[TextData[{
 "We defined x to be 6, then we defined myFunction[y] to be 79.4, but we did \
not define myFunction[6] or myFunction[z]. OK, that was cute, but how do I \
define a ",
 StyleBox["real",
  FontSlant->"Italic"],
 " function, like in Java? Funny you should ask....I was just getting to \
that. There are two things you need to do differently. First, when you \
specify the formal parameters (i.e. arguments) to the function, you have to \
put an underscore after each one. "
}], "Text",
 CellChangeTimes->{
  3.58350953536401*^9, {3.583509723909738*^9, 3.5835097500901327`*^9}, {
   3.583509796217868*^9, 3.5835098575216017`*^9}, {3.617748925441184*^9, 
   3.617748989153574*^9}, {3.617749043492557*^9, 
   3.6177490571758947`*^9}},ExpressionUUID->"a8bed37a-2aaf-48e4-8c54-\
f024136fe022"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myOtherFunction", "[", "x_", "]"}], "=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellLabel->
  "(K2) In[17]:=",ExpressionUUID->"59831b60-7254-492a-b5cb-7602aea4b19b"],

Cell[BoxData[
 RowBox[{"myOtherFunction", "[", "9", "]"}]], "Input",
 CellLabel->
  "(K2) In[18]:=",ExpressionUUID->"d9ed44d1-0e4a-4023-8879-e8cf58c72aae"],

Cell[TextData[{
 "That didn\[CloseCurlyQuote]t seem to work. We wanted the ",
 StyleBox["x",
  FontFamily->"Courier"],
 " to the right of the equals to be replaced by whatever argument is provided \
when the function is called. Instead, this just evaluated x^2 immediately \
when the function was defined, which yields 36 (we defined x to be 6 \
earlier). Thus, we defined a function of one argument that returns 36 \
regardless of the argument we supply when we call the function.  We don\
\[CloseCurlyQuote]t want the ",
 "kernel",
 " to evaluate the right hand when we define the function, we want it to do \
so after the parameter ",
 StyleBox["x_ ",
  FontFamily->"Courier"],
 "has been bound to whatever value we supply when we call the function. To \
get that behavior, we have to use ",
 StyleBox[":=",
  FontFamily->"Courier"],
 " instead of ",
 StyleBox["=",
  FontFamily->"Courier"],
 ", telling the kernel to delay evaluation of the right hand side until the \
parameters are bound.",
 StyleBox[" ",
  FontFamily->"Courier"]
}], "Text",
 CellChangeTimes->{{3.583509962683702*^9, 3.5835102162013903`*^9}, {
   3.583510265379957*^9, 3.583510344193399*^9}, {3.583510845439282*^9, 
   3.583510850029949*^9}, {3.5844481853982687`*^9, 3.5844481980706997`*^9}, {
   3.584468790846661*^9, 3.5844689700978622`*^9}, {3.584640138410571*^9, 
   3.584640205894719*^9}, 
   3.584993384473658*^9},ExpressionUUID->"fb66ea62-8ab9-446f-b2b1-\
e6df5f9a9f48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myOtherFunction", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellLabel->
  "(K2) In[19]:=",ExpressionUUID->"fd4d4430-3192-4036-a411-f01942496e6f"],

Cell[TextData[{
 StyleBox["Notice two differences from when we tried defining it with ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["=",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". First, the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" on the right hand side is now colored green, indicating a formal \
parameter. Second, no value is returned when we define a function this way \
because evaluation is delayed until the function is called.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583510567553496*^9, 3.583510573457621*^9}, {
   3.583510650578022*^9, 3.583510764625504*^9}, {3.5835108149425*^9, 
   3.58351082859461*^9}, {3.583590562376876*^9, 3.583590564618589*^9}, {
   3.584131298122114*^9, 3.5841313197674522`*^9}, 3.584131410378069*^9, {
   3.584131465886734*^9, 3.584131502377898*^9}, {3.584131546894009*^9, 
   3.5841315502273827`*^9}, {3.584131615536457*^9, 3.584131643311674*^9}, {
   3.5841316740526943`*^9, 3.584131691111546*^9}, {3.584131723406474*^9, 
   3.584131730007091*^9}, 3.584448203837764*^9, {3.5844687013527946`*^9, 
   3.58446870459618*^9}, {3.584469038637806*^9, 3.5844690397720613`*^9}, {
   3.617795309437952*^9, 
   3.6177953383046637`*^9}},ExpressionUUID->"3f4c5683-29b8-43d3-a4fa-\
4e8fb5825e0e"],

Cell[BoxData[
 RowBox[{"myOtherFunction", "[", "9", "]"}]], "Input",
 CellLabel->
  "(K2) In[20]:=",ExpressionUUID->"e1e49ac8-fc2f-4c24-9727-ca8648a8b67d"],

Cell["\<\
This is what we wanted. Most of the time you will want to use formal \
parameters and delayed evaluation. There are a couple of circumstances in \
which you may want to define an expression directly using =. For example, \
mapping small integers to their spellings.\
\>", "Text",
 CellChangeTimes->{{3.5835104896269827`*^9, 3.583510545465939*^9}, {
   3.583510872438327*^9, 3.5835109644295692`*^9}, {3.583511001982275*^9, 
   3.5835110622974997`*^9}, 3.584202692918491*^9, {3.584202725644682*^9, 
   3.584202937971849*^9}, 3.584448214517316*^9, {3.584453612487609*^9, 
   3.584453612654776*^9}, {3.5844690748757687`*^9, 3.58446909914001*^9}, {
   3.617795382912922*^9, 3.617795406123108*^9}, 3.61781118897219*^9, {
   3.6178112588299093`*^9, 
   3.617811275677533*^9}},ExpressionUUID->"aeb2a3ea-215b-4be2-8aeb-\
1cae79f9831e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numberSpelling", "[", "8", "]"}], "=", "\"\<eight\>\""}]], "Input",\

 CellLabel->"In[38]:=",ExpressionUUID->"8e1ac973-a038-4c3d-80bc-c57fd2a5dfae"],

Cell[BoxData[
 RowBox[{"numberSpelling", "[", "8", "]"}]], "Input",
 CellChangeTimes->{{3.6178112880880747`*^9, 3.617811294983016*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"629766e9-e86b-412e-86dc-8aa65828826e"],

Cell["\<\
Do not confuse this expression with a reference to a part of an array or \
list. I could define a list like this:\
\>", "Text",
 CellChangeTimes->{{3.583511827828168*^9, 3.583511898169674*^9}, {
  3.583512671702874*^9, 
  3.583512671799314*^9}},ExpressionUUID->"26445aea-c95a-43bd-aeb5-\
6f0bb401b716"],

Cell[BoxData[
 RowBox[{"numberSpellingList", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<one\>\"", ",", " ", "\"\<two\>\"", ",", " ", "\"\<three\>\""}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.5835119000252943`*^9, 3.583511921588409*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"da1ec615-e824-4546-84a0-ed49b8747982"],

Cell["\<\
but to reference the parts of that list I would use double square brackets, \
as in:\
\>", "Text",
 CellChangeTimes->{{3.583511927611332*^9, 
  3.583511940449725*^9}},ExpressionUUID->"cc7edd13-fa17-415b-9f99-\
41854c8bd552"],

Cell[BoxData[
 RowBox[{"numberSpellingList", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.583511967953659*^9, 3.583511987807415*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"648bf620-ea3e-4d1c-850b-ab389b759dc4"],

Cell[TextData[{
 StyleBox["(Note: ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" list indexing starts at 1, not 0.)",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n",
  FontColor->RGBColor[1., 0.2527656977187762, 1.]],
 "\nThings go all haywire if you try to use the single-brackets where you \
should use double or vice-versa:"
}], "Text",
 CellChangeTimes->{{3.5835120074120092`*^9, 3.583512063426181*^9}, {
   3.583512698058135*^9, 3.583512727802094*^9}, 3.583590722503429*^9, {
   3.584131904779606*^9, 3.584131916479569*^9}, {3.584131965032222*^9, 
   3.584132017584138*^9}, 
   3.584448217788957*^9},ExpressionUUID->"91f67c05-4094-49e5-933f-\
e963d1a804dc"],

Cell[BoxData[
 RowBox[{"numberSpellingList", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.5835120826836452`*^9, 3.583512083747211*^9}},
 CellLabel->
  "In[219]:=",ExpressionUUID->"7cbd443b-cda1-4dbd-9593-0ed04a5269b1"],

Cell[TextData[{
 "Here, the kernel has substituted the definition of ",
 Cell[BoxData["numberSpellingList"], "Input",
  CellChangeTimes->{{3.5835120826836452`*^9, 3.583512083747211*^9}},
  ExpressionUUID->"9c822fbc-8b99-4d3d-80b9-ed934c40e700"],
 " because that is the only way to simplify the input expression -- \
interpreting it as a call to an undefined function would not be useful. \
Likewise, we cannot use the double brackets for arguments to a function:"
}], "Text",
 CellChangeTimes->{{3.583512108275145*^9, 3.58351213052148*^9}, {
   3.583512167639935*^9, 3.583512244729785*^9}, {3.583512765037084*^9, 
   3.583512767362131*^9}, 
   3.584448218933291*^9},ExpressionUUID->"356f4bba-8246-4cae-a858-\
1b67238402bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numberSpelling", "[", 
   RowBox[{"[", "8", "]"}], "]"}], " "}]], "Input",
 Evaluatable->True,
 CellChangeTimes->{{3.583512250020151*^9, 3.583512256337138*^9}, {
  3.584132916424819*^9, 3.584132917696209*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"ff98a193-51c7-45a5-b38d-d4d88b780388"],

Cell[TextData[{
 StyleBox["This evaluates to itself, since ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  RowBox[{
   StyleBox["numberSpelling",
    FontFamily->"Courier",
    FontSize->13], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["is",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["not",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["a",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["list",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["and",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["does",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["not",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["have",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["an",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["eighth",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox[
    RowBox[{"part", "."}],
    FontSize->14]}]], "Input",
  CellChangeTimes->{{3.583512250020151*^9, 3.583512256337138*^9}},
  FontFamily->"Arial",
  FontWeight->"Plain",ExpressionUUID->
  "3345935e-30a7-40c7-a55e-72fc957b0660"],
 " Since the kernel couldn\[CloseCurlyQuote]t simplify the input, it just \
returned the input itself. Note that the output format looks slightly \
different than the input format, but that\[CloseCurlyQuote]s eye candy \
created by the notebook front end. This kind of eye candy is ignored by the \
kernel -- it will treat either form as a representation of the same \
expression."
}], "Text",
 CellChangeTimes->{{3.58351226002746*^9, 3.583512354850328*^9}, {
   3.5835127825071583`*^9, 3.583512902977577*^9}, {3.583513409377893*^9, 
   3.58351342773029*^9}, {3.5835907586338997`*^9, 3.58359075863402*^9}, 
   3.584132054439049*^9, {3.584132506978669*^9, 3.5841325577442617`*^9}, 
   3.584448220373301*^9, 3.584449560875083*^9, {3.584449645881546*^9, 
   3.58444964620308*^9}, {3.584453359434044*^9, 3.584453486192256*^9}, {
   3.5844693484607286`*^9, 3.584469351252852*^9}, {3.5846405329271097`*^9, 
   3.584640537302821*^9}, {3.6178113760247726`*^9, 3.617811376851139*^9}, {
   3.681064874750577*^9, 3.681064876434978*^9}, {3.712585861052689*^9, 
   3.712585863337393*^9}},ExpressionUUID->"e13b3d94-f4ed-4bc1-9517-\
8e393f835271"],

Cell[CellGroupData[{

Cell["Function names", "Subsubsubsection",
 CellChangeTimes->{{3.584449599331242*^9, 
  3.584449602074819*^9}},ExpressionUUID->"f0ad952f-8b2e-4634-82ef-\
6ce286769c4a"],

Cell[TextData[{
 StyleBox["Function names must begin with a letter and can only contain \
letters and numbers.  Since all ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" built-in functions start with a capital letter, it is universal \
practice to start user-defined function and variable names with a lowercase \
letter. This is required in all Mathematica assignments to get full credit. \
The style in ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is to use full length English names for functions and variables \
because the result is more readable, even though it requires more typing, and \
we expect you to follow this convention. All words after the first should \
begin with a capital letter to indicate the beginning of a new word. When \
programming assignments are graded, there will be some points for style and \
legibility.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.584132597653451*^9, 3.5841326054163733`*^9}, {
  3.5841326459891567`*^9, 3.584132693420079*^9}, {3.584132819938685*^9, 
  3.5841329501168327`*^9}, {3.5844695120944643`*^9, 3.584469610516405*^9}, {
  3.585046560344132*^9, 3.5850465683731127`*^9}, {3.617811435258728*^9, 
  3.617811482216416*^9}, {3.681064922396386*^9, 3.681064956536272*^9}, {
  3.681065151334351*^9, 
  3.681065179450066*^9}},ExpressionUUID->"6ca61cf1-537e-47fe-857a-\
71dee19c2751"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Clearing definitions from variables", "Subsubsubsection",
 CellChangeTimes->{{3.584449599331242*^9, 3.584449602074819*^9}, {
  3.584469745126934*^9, 
  3.584469750291287*^9}},ExpressionUUID->"ff120b48-d607-4529-974a-\
a6ff02d5552a"],

Cell[TextData[{
 "To clear the definition of a specific variable, use ",
 StyleBox["Clear",
  FontFamily->"Courier"],
 ":"
}], "Text",
 CellChangeTimes->{{3.584451578045514*^9, 3.584451580502894*^9}, {
  3.584451612381757*^9, 3.584451640509193*^9}, {3.584451729171104*^9, 
  3.584451730740394*^9}, {3.584451852715582*^9, 3.58445188877181*^9}, {
  3.584469648141492*^9, 3.584469650683958*^9}},
 FontColor->GrayLevel[
  0],ExpressionUUID->"1106cda2-5f2a-4b41-8c06-53d98611fd1e"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.584451645614085*^9, 3.584451649038361*^9}, {
  3.584451689016548*^9, 3.584451689661124*^9}},
 FontColor->GrayLevel[0],
 CellLabel->
  "In[221]:=",ExpressionUUID->"f399e7ff-cd73-4a25-a651-0d00e2aa2fd8"],

Cell[TextData[{
 StyleBox["x",
  FontFamily->"Courier"],
 " is now undefined. You can clear function definitions the same way.  To \
clear all variables, type:"
}], "Text",
 CellChangeTimes->{{3.58445171515657*^9, 3.5844517436513643`*^9}, {
  3.584451801868353*^9, 3.5844518321093187`*^9}, {3.584451910739167*^9, 
  3.584451977817911*^9}, {3.5844696540442963`*^9, 3.584469657924156*^9}},
 FontColor->GrayLevel[
  0],ExpressionUUID->"ca03e0c8-b435-4ea7-a997-54de388dd1c7"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.584451807214631*^9, 3.58445182186653*^9}},
 FontColor->GrayLevel[0],
 CellLabel->
  "In[222]:=",ExpressionUUID->"cd7394e4-51f4-4512-b02e-eb3399b5f9b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}},ExpressionUUID->"4a868d39-558e-435e-a961-\
5f07fe248261"],

Cell["Read the documentation page tutorial/DefiningFunctions. ", "Text",
 CellChangeTimes->{{3.583516895083177*^9, 3.583516912010635*^9}, {
  3.5841322790941763`*^9, 3.584132281197949*^9}, {3.585046610176527*^9, 
  3.585046612036508*^9}},
 FontColor->GrayLevel[
  0],ExpressionUUID->"a605d789-2d0e-46e1-ba7d-f0388579e7fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Practice: Defining functions with formal parameters and delayed evaluation\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 
  3.5835124550655746`*^9}},ExpressionUUID->"6a17e8d1-d96d-45d0-8750-\
f264802aa63c"],

Cell[CellGroupData[{

Cell[TextData[{
 "Define a function that takes in a single argument ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1cc97fc3-0913-40a6-bff7-69edbdbb32cd"],
 " and returns an ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Cross]", "n"}], TraditionalForm]],ExpressionUUID->
  "f1f16ff6-e3fb-4c3d-a9a8-9e4725c359cc"],
 " square matrix containing random integers between 1 and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "192064bd-bbc5-4b54-b6da-d349bc17ecf5"],
 ". Demonstrate that it works by calling it on 5."
}], "ItemNumbered",
 CellChangeTimes->{{3.583512463914525*^9, 3.583512590145523*^9}, {
  3.583512932509253*^9, 3.5835130247213907`*^9}, {3.585046689992331*^9, 
  3.585046690588716*^9}},ExpressionUUID->"c19f7089-180f-4663-a6bc-\
0e8c340bbd15"],

Cell["\<\
Define a function that takes in two arguments and returns a list consisting \
of their difference, product, and ratio, in that order. You can construct a \
list explicitly by just putting curly brackets around some expressions in \
your code. Demonstrate that it works by calling it on 5 and 10.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583512463914525*^9, 3.583512590145523*^9}, {
  3.583512932509253*^9, 3.5835130628895617`*^9}, {3.583513112769485*^9, 
  3.583513170969942*^9}, {3.583590840919817*^9, 
  3.583590963314618*^9}},ExpressionUUID->"42fd68e4-8595-4d9b-8d8b-\
ae91675c2c36"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notebooks and kernels", "Subsection",
 CellChangeTimes->{{3.584640965842999*^9, 3.5846409716782827`*^9}, 
   3.584993390458672*^9},ExpressionUUID->"7c50595e-9375-434a-b82c-\
33ebeb3554fd"],

Cell["\<\
You can have more than one notebook open at once. By default, each notebook \
interacts with the same kernel. Since the kernel keeps track of values \
assigned to variables and expressions, definitions made in any notebook \
appear as though they were made in all notebooks. If you define x=1 in one \
notebook, then define x=2 in a second notebook, then go back to the first \
notebook, you\[CloseCurlyQuote]ll find that the value of x is now 2. 

The default is that all notebooks are connected to the same kernel, but you \
can also run more than one kernel (typically up to 4). The menu sequence \
Evaluation -> kernel Configuration Options will pop up a window that allows \
you to add new kernel configurations with names. Once you\[CloseCurlyQuote]ve \
configured a second kernel it will show up as a choice when you use the menu \
sequence Evaluation -> Notebook\[CloseCurlyQuote]s Kernel. This is useful \
mainly if you have a long running computation in one kernel and you want to \
simultaneously do some interactive, lightweight computation in another. Each \
kernel will only evaluate one input at a time.\
\>", "Text",
 CellChangeTimes->{{3.5846409795267057`*^9, 3.584641038286228*^9}, {
  3.5846411161829033`*^9, 3.584641225222479*^9}, {3.58464126124467*^9, 
  3.584641315262252*^9}, {3.5846416817630177`*^9, 3.5846417611496696`*^9}, {
  3.5846418632564087`*^9, 3.584641959678213*^9}, {3.584993392157309*^9, 
  3.584993407697976*^9}, {3.585047118929764*^9, 
  3.585047202868911*^9}},ExpressionUUID->"b1d7c9ab-4f18-4df3-af75-\
5720840ccbf5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comments", "Subsection",
 CellChangeTimes->{{3.584450087344184*^9, 
  3.5844500884226227`*^9}},ExpressionUUID->"8bd2df6b-2f9a-4e05-823b-\
ddd3ee283ccc"],

Cell["\<\
You can add comments to notebooks in text cells or input cells.  To add a \
comment in an input cell, enclose the comment in (* and *).  The comment can \
be inserted anywhere in the expression.  For example\
\>", "Text",
 CellChangeTimes->{{3.584450161231085*^9, 3.584450425612118*^9}, {
  3.647618658333581*^9, 
  3.647618658586446*^9}},ExpressionUUID->"d7c522d5-3b0d-4e87-83a8-\
99606a7e3b49"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"a", ">", "b"}], ",", " ", 
   RowBox[{"(*", " ", "then", " ", "*)"}], " ", "p", ",", " ", 
   RowBox[{"(*", " ", "else", " ", "*)"}], " ", "q"}], "]"}]], "Input",
 CellChangeTimes->{{3.584450432643641*^9, 3.5844504924388847`*^9}, {
  3.5844505371842747`*^9, 3.584450558669944*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"a7fb8ea0-7808-4d3f-a343-8e11967286a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Printing to the notebook", "Subsection",
 CellChangeTimes->{{3.583508007226316*^9, 3.583508008965015*^9}, {
  3.583513275229184*^9, 
  3.583513288921771*^9}},ExpressionUUID->"e02aa7d4-6300-41c7-87be-\
e7ab1c6fd499"],

Cell[TextData[{
 StyleBox["There are many ways to print and to create formatted output. The \
most basic is the built-in function ",
  FontColor->GrayLevel[0]],
 StyleBox["Print",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.583513325210005*^9, 3.5835133416151237`*^9}, {
   3.583513376257972*^9, 3.583513382754396*^9}, {3.5835141393163157`*^9, 
   3.5835141849955053`*^9}, 
   3.583590981278207*^9},ExpressionUUID->"a561b3fd-8535-4314-8543-\
35ed026205b6"],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}},ExpressionUUID->"efbf3343-495c-4388-ac76-\
2656f0bd9f89"],

Cell[TextData[{
 "Read the reference documentation page on ",
 StyleBox["Print",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". This is a relatively brief and simple page with just 13 examples. Read \
all of them. At the end, you\[CloseCurlyQuote]ll find that you have learned \
about some new kinds of things ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can do, such as create graphics from expressions, even though you won\
\[CloseCurlyQuote]t actually know how to do or use these things yourself yet. \
It\[CloseCurlyQuote]s important to develop a set of terms and concepts that \
you don\[CloseCurlyQuote]t fully understand. That way, \
you\[CloseCurlyQuote]ll know what to look up when you\[CloseCurlyQuote]re \
searching for a way to do something. For example, you\[CloseCurlyQuote]ll \
know that there\[CloseCurlyQuote]s a powerful built-in function called ",
 StyleBox["Graphics",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that you can look up if you want to write code that generates vector \
graphics and that there\[CloseCurlyQuote]s a function called ",
 StyleBox["Column",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that prints things in columns. "
}], "Text",
 CellChangeTimes->{{3.583513794570169*^9, 3.583513795964725*^9}, {
  3.583514188785845*^9, 3.583514441946226*^9}, {3.583591022447954*^9, 
  3.5835910283336983`*^9}, {3.584469978373869*^9, 
  3.584469988452393*^9}},ExpressionUUID->"66552d51-7198-4232-b242-\
a40ef9bb106b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Printing", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}},ExpressionUUID->"5982435e-ba58-4e7e-ab60-\
315454d188d7"],

Cell[CellGroupData[{

Cell[TextData[{
 "Yes, it had to come sometime. You knew you couldn\[CloseCurlyQuote]t \
escape. So here it is. Write a function called ",
 StyleBox["hello",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " that takes no arguments and, when called, prints \
\[OpenCurlyDoubleQuote]Hello, World.\[CloseCurlyDoubleQuote] Demonstrate that \
it works. "
}], "ItemNumbered",
 CellChangeTimes->{{3.583514476426425*^9, 3.583514749314197*^9}, {
  3.583514798729973*^9, 3.5835148328018427`*^9}, {3.5835148917642803`*^9, 
  3.5835148917693033`*^9}},ExpressionUUID->"a45d2811-a84b-432a-9f41-\
23801666d729"],

Cell[TextData[{
 "Now write a function called ",
 StyleBox["helloWorld",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " that takes in one argument and behaves as shown in the next three cells. I \
made these cells non-evaluatable because they are meant to show you what \
should happen after define ",
 StyleBox["helloWorld",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 ", which is currently undefined."
}], "ItemNumbered",
 CellChangeTimes->{{3.583514476426425*^9, 3.583514749314197*^9}, {
  3.583514798729973*^9, 3.5835148328018427`*^9}, {3.5835148917642803`*^9, 
  3.5835149224577503`*^9}, {3.585047307232275*^9, 3.585047307420548*^9}, {
  3.712585549398888*^9, 3.712585601173873*^9}, {3.7125857002673063`*^9, 
  3.7125857177590933`*^9}, {3.712585932690318*^9, 
  3.7125859841065903`*^9}},ExpressionUUID->"92eba4aa-df2c-4c78-ad8e-\
f5870a5deb31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "7", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583514981384881*^9, 3.583514993450548*^9}, {
   3.584471791807515*^9, 3.584471797166753*^9}, {3.58447185255445*^9, 
   3.5844718532964277`*^9}, 3.712585511903698*^9, {3.712585614776537*^9, 
   3.712585624646484*^9}, {3.712585927621648*^9, 3.712585928372439*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"56dcbf60-d0e8-464e-ae5f-c0b9d77d359e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "7", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", 7, "."],
  Editable->False]], "Print",
 Deployed->True,
 CellChangeTimes->{3.584471650014612*^9},
 CellLabel->
  "During evaluation of \
In[186]:=",ExpressionUUID->"4b4bc904-81cc-49d0-8f54-b3e0c820914c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"helloWorld", "[", "9", "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{"do", " ", "not", " ", "evaluate"}], " ", "*)"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835150288763123`*^9, 3.5835150292353153`*^9}, 
   3.712585517060568*^9, 3.712585634223176*^9},
 CellLabel->
  "In[184]:=",ExpressionUUID->"4b05e2f4-4335-4c0a-8389-128ae066c9ce"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "9", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", 9, "."],
  Editable->False]], "Print",
 CellChangeTimes->{3.5844715662134943`*^9},
 CellLabel->
  "During evaluation of \
In[184]:=",ExpressionUUID->"1f64db46-5caf-44b6-8bac-d19691e8c08f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"helloWorld", "[", "\"\<Nine\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"do", " ", "not", " ", "evaluate"}], " ", "*)"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.58351503714743*^9, 3.5835150402907543`*^9}, 
   3.71258552038859*^9, {3.712585637726371*^9, 3.712585638278509*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"319631b9-0a5f-4eac-a30c-277c51c36907"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "\<\"Nine\"\>", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", "Nine", "."],
  Editable->False]], "Print",
 CellChangeTimes->{3.584471568311818*^9},
 CellLabel->
  "During evaluation of \
In[185]:=",ExpressionUUID->"1f8aa6c5-16b4-4a0d-81f8-6cff448778c4"]
}, Open  ]],

Cell["\<\
It should behave this way for any numeric or string argument. Pay attention \
to getting all the details of spacing and punctuation right. \[FilledSquare]\
\>", "Text",
 CellChangeTimes->{{3.583515052243328*^9, 3.5835150800980663`*^9}, {
  3.5835180226909637`*^9, 
  3.583518027220049*^9}},ExpressionUUID->"736a8c5f-24dc-47fe-83b2-\
ff9da6dfbc60"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Repeating operations (a.k.a. looping, iterating)", "Subsection",
 CellChangeTimes->{{3.583508056911644*^9, 
  3.583508078785828*^9}},ExpressionUUID->"f6f8cd80-ab6b-4c93-aed1-\
227c718525c2"],

Cell[TextData[{
 "You already learned one way to do the same thing multiple times using ",
 StyleBox["Table",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". However, you don\[CloseCurlyQuote]t always want the result of each \
iteration returned in a list. Sometimes you just want to compute temporary \
intermediate values and decide whether to return them in a list, print them \
out, or do something else, depending on what they are. For this you can use \
any of a variety of iteration constructs similar to those used in other \
programming languages, including ",
 StyleBox["Do",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", ",
 StyleBox["While",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", and, ",
 StyleBox["For",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.583515204714781*^9, 3.583515368962274*^9}, {
  3.583591110990778*^9, 
  3.583591112074485*^9}},ExpressionUUID->"ddd50e62-b474-4abc-ad98-\
1d3316cd461c"],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}},ExpressionUUID->"277d5c05-71b4-456d-b4f5-\
1b32b8432ca8"],

Cell[CellGroupData[{

Cell["Read the documentation page tutorial/RepetitiveOperations.", \
"ItemNumbered",
 CellChangeTimes->{{3.583516987105856*^9, 3.583516991677878*^9}, {
   3.5835174087365437`*^9, 3.583517422290324*^9}, {3.58351759611478*^9, 
   3.583517597810013*^9}, {3.584133557959552*^9, 3.584133559557939*^9}, 
   3.617812911505995*^9, {3.6178129496389437`*^9, 
   3.6178129775902767`*^9}},ExpressionUUID->"803a3306-9f48-4a13-990e-\
cc30b5741cff"],

Cell[TextData[{
 "Then read the reference page on ",
 StyleBox["For",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 "."
}], "ItemNumbered",
 CellChangeTimes->{{3.583516987105856*^9, 3.583516991677878*^9}, {
   3.5835174087365437`*^9, 3.583517422290324*^9}, {3.58351759611478*^9, 
   3.583517597810013*^9}, {3.584133557959552*^9, 3.584133559557939*^9}, 
   3.617812911505995*^9},ExpressionUUID->"09951a62-2149-435a-b1e6-\
a95750721e01"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Looping constructs", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 
  3.583517631065776*^9}},ExpressionUUID->"49022a07-69aa-43aa-a9bc-\
349caec00fde"],

Cell[TextData[{
 "Write a function ",
 StyleBox["helloTimes[n_]",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that prints \[OpenCurlyDoubleQuote]Hello, World.\[CloseCurlyDoubleQuote] \
",
 StyleBox["n",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " times. Demonstrate that it works by calling it on 9."
}], "Text",
 CellChangeTimes->{{3.583517679589593*^9, 3.583517796721043*^9}, {
  3.583519453604433*^9, 3.583519458657486*^9}, {3.584134177790297*^9, 
  3.5841342252613373`*^9}, {3.617812891957692*^9, 
  3.6178128924489937`*^9}},ExpressionUUID->"cd147c10-bfa8-49cc-9353-\
c257249e7ac6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Local constants and variables", "Subsection",
 CellChangeTimes->{{3.583508056911644*^9, 3.583508078785828*^9}, {
  3.583519318090605*^9, 3.583519326145769*^9}, {3.6178138647145987`*^9, 
  3.6178138695735893`*^9}},ExpressionUUID->"fe6427cb-692c-4bd1-ab88-\
06fb140f8108"],

Cell["\<\
By default, all symbols used within the body of a function are global, \
meaning their value inside the function is the same as their value outside.\
\>", "Text",
 CellChangeTimes->{{3.585047905191188*^9, 3.58504795943727*^9}, {
  3.585047991285988*^9, 3.5850480165814533`*^9}, {3.585048050068652*^9, 
  3.5850481057094603`*^9}, {3.617813880861801*^9, 
  3.617813942408988*^9}},ExpressionUUID->"30d6803d-c6b2-4312-98de-\
59e8acb5c626"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fun", "[", "]"}], ":=", " ", 
  RowBox[{"(", 
   RowBox[{"var", "=", "5"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.617813946084444*^9, 3.617813985336203*^9}, {
   3.617814046852227*^9, 3.617814051811384*^9}, 3.617814147430016*^9, {
   3.6178141885498857`*^9, 3.617814220154319*^9}, {3.7125860334378757`*^9, 
   3.712586038939913*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"a2d2b84f-2b53-4f00-bc40-bbaebdf59bbf"],

Cell[BoxData[
 RowBox[{"var", "=", "2"}]], "Input",
 CellChangeTimes->{{3.617813991055848*^9, 3.617813993533111*^9}, {
  3.6178141302486763`*^9, 3.6178141582825413`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"9ba4ff73-5488-4c16-b760-3472492cc54c"],

Cell[BoxData[
 RowBox[{"fun", "[", "]"}]], "Input",
 CellChangeTimes->{{3.61781412225099*^9, 3.6178141372893963`*^9}, 
   3.617814167491681*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"80f52e11-9e00-40f1-b2c1-8afdb7dfdf30"],

Cell[BoxData["var"], "Input",
 CellChangeTimes->{{3.617814170270504*^9, 3.6178141705916*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"e62ff185-da2b-49c5-a3f6-f8d8fbd8dfff"],

Cell[TextData[{
 "Setting the value of ",
 StyleBox["var",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " inside the function also changed its value outside the function. With very \
few exceptions, ",
 StyleBox["do not use global variables.",
  FontWeight->"Bold"],
 " Those poorly trained individuals who use global variables force the rest \
of us to read the entire code base to figure out where the variables get \
their current value and what effect changing their value may have elsewhere. \
Plus, ",
 StyleBox["we will subtract points from code that uses global variables",
  FontWeight->"Bold"],
 ", with one exception: variables that are used to control the behavior of an \
entire program, are set only once, at the top of a file, and begin with a \
dollars sign, as in ",
 StyleBox["$RecurisionLimit",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". If you try to set the value of a global variable from within a function, \
you will lose points and make enemies among those who read your code."
}], "Text",
 CellChangeTimes->{{3.617814254468433*^9, 
  3.617814553298538*^9}},ExpressionUUID->"eeb5f76c-c31f-4245-9887-\
36b362320324"],

Cell[TextData[{
 "There are several ways of defining local variables. In the simplest and \
most common case, you want to define a variable to be the result of some \
computation and then keep that value fixed throughout the execution of the \
function. You do this using the built-in construct ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", as in, "
}], "Text",
 CellChangeTimes->{{3.6178145647860737`*^9, 
  3.617814744197715*^9}},ExpressionUUID->"bf3bb5bc-5b98-4e2c-80cb-\
17496b3db6e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionsOfAFactorial", "[", "n_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nFact", "=", 
      RowBox[{"n", "!"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nFact", "^", "2"}], ",", " ", 
      RowBox[{"nFact", "^", "3"}], ",", " ", 
      RowBox[{"N", "[", 
       RowBox[{"Log", "[", "nFact", "]"}], "]"}], ",", 
      RowBox[{"N", "[", 
       RowBox[{"Power", "[", 
        RowBox[{"nFact", ",", 
         RowBox[{"1", "/", "n"}]}], "]"}], "]"}]}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.617814773404429*^9, 3.6178149163555098`*^9}, {
  3.617814985801324*^9, 3.617814996508684*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"15959a22-43ba-4a6c-b46b-cfab694fb1b0"],

Cell[BoxData[
 RowBox[{"functionsOfAFactorial", "[", "5", "]"}]], "Input",
 CellChangeTimes->{{3.617814965319982*^9, 3.617814971553808*^9}, {
  3.617815016420002*^9, 3.6178150297024*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"04ca98da-0e3a-4ec5-91fd-3cb1846ed9a3"],

Cell[TextData[{
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " simply substitutes the expression on the right-hand-side of the = sign for \
the symbol on the left throughout the enclosed expression. This is a textual \
substitution, so the result is by definition identical to writing"
}], "Text",
 CellChangeTimes->{{3.617815056670413*^9, 3.617815153668129*^9}, {
  3.647618943712634*^9, 
  3.647618945181795*^9}},ExpressionUUID->"f5ed3fde-9780-4e3e-99ab-\
cc2f5708c38b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionsOfAFactorial", "[", "n_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"n", "!"}], "^", "2"}], ",", " ", 
    RowBox[{
     RowBox[{"n", "!"}], "^", "3"}], ",", " ", 
    RowBox[{"N", "[", 
     RowBox[{"Log", "[", 
      RowBox[{"n", "!"}], "]"}], "]"}], ",", 
    RowBox[{"N", "[", 
     RowBox[{"Power", "[", 
      RowBox[{
       RowBox[{"n", "!"}], ",", 
       RowBox[{"1", "/", "n"}]}], "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.617814773404429*^9, 3.6178149163555098`*^9}, {
  3.617814985801324*^9, 3.617814996508684*^9}, {3.617815168324822*^9, 
  3.617815199539178*^9}, {3.6178156267558317`*^9, 3.617815633045809*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"ca1635af-05cd-411c-bcb6-1ede79f1a1fc"],

Cell[TextData[{
 "The first argument to ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is a list of substitutions to make -- in this case, just a single \
substitution. However, the substitutions are not applied to each other, so"
}], "Text",
 CellChangeTimes->{{3.61781520270221*^9, 3.617815257879258*^9}, {
  3.617815333181119*^9, 
  3.6178153531882963`*^9}},ExpressionUUID->"e24057e4-927d-435a-b3df-\
db1c5fc8c1f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"foo", "[", "n_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"square", "=", 
       RowBox[{"n", "^", "2"}]}], ",", " ", 
      RowBox[{"cube", "=", 
       RowBox[{"n", "*", "square"}]}]}], "}"}], ",", "cube"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.617815355276231*^9, 3.617815425779142*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"30e0c729-968a-4131-bd90-9bd1fd42cbbd"],

Cell["does not work as intended.", "Text",
 CellChangeTimes->{{3.617815428771834*^9, 
  3.617815441306134*^9}},ExpressionUUID->"0ffa9866-fbb2-4c85-9598-\
f373ecbd80dd"],

Cell[BoxData[
 RowBox[{"foo", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.6178154427421217`*^9, 3.6178154498127337`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"276e56db-f8f0-47e1-9472-5afb640b5ab6"],

Cell[TextData[{
 "The problem is that the ",
 StyleBox["square",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " on the right-hand-side of the substitution for ",
 StyleBox["cube",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is undefined. To make this work, you have to nest two ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " expressions:"
}], "Text",
 CellChangeTimes->{{3.6178154615452023`*^9, 
  3.6178155536712008`*^9}},ExpressionUUID->"e90044ed-fab0-4122-8341-\
642efc5ce2ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"foo", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"square", "=", 
      RowBox[{"n", "^", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"cube", "=", 
        RowBox[{"n", "*", "square"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "cube"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.617815355276231*^9, 3.617815425779142*^9}, 
   3.617815533728703*^9, {3.617815566704836*^9, 3.617815602144663*^9}, 
   3.617815665660452*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"e55d6c2b-b2f2-4f76-aade-3fcce909cb61"],

Cell[BoxData[
 RowBox[{"foo", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.617815669551456*^9, 3.617815674726883*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"bfe005bb-5eff-4792-a9e6-ce04518f9c42"],

Cell[TextData[{
 "If you want to create a local variable whose value you can change multiple \
times during the execution of a function, use ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". The syntax is the same:"
}], "Text",
 CellChangeTimes->{{3.6178160299720707`*^9, 
  3.617816094032148*^9}},ExpressionUUID->"8ccd8717-246c-4b52-9b64-\
07d947e6946f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "is", " ", "ugly", " ", "code", " ", "of", " ", "the", " ", 
    "type", " ", "I", " ", 
    RowBox[{"don", "'"}], "t", " ", "like", " ", "to", " ", 
    RowBox[{"get", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x1", "=", "1"}], ",", 
      RowBox[{"x2", "=", "1"}], ",", 
      RowBox[{"x3", "=", "2"}], ",", "k"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"k", "=", "1"}], ",", 
       RowBox[{"k", "<=", 
        RowBox[{"n", "-", "2"}]}], ",", 
       RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x3", "=", 
         RowBox[{"x1", "+", "x2"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"x1", "=", "x2"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x2", "=", "x3"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "2"}], ",", "x3", ",", "1"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.617816099276289*^9, 3.617816223845367*^9}, {
  3.6178162562944717`*^9, 3.617816292891802*^9}, {3.61781638078545*^9, 
  3.617816517046691*^9}, {3.61781655331769*^9, 3.617816578483618*^9}, {
  3.617816739947444*^9, 3.6178167608916817`*^9}, {3.617816861645234*^9, 
  3.617816890785234*^9}, {3.6178169330514717`*^9, 3.617816946850268*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"969f7740-603d-4016-9b1c-054e69a48560"],

Cell[BoxData[
 RowBox[{"fib", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.617816474960911*^9, 3.617816498576063*^9}, {
  3.617816585024851*^9, 3.61781659262654*^9}, {3.6178168437872667`*^9, 
  3.617816880778634*^9}, {3.617816911509778*^9, 3.617816912281822*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"f0d3ddde-3e51-409a-885d-7d3ef4cfd478"],

Cell[TextData[{
 "Whereas ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " works by substituting the value for the variable, ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " works by generating a brand new symbol (variable name), replacing all \
instances of the old variable in the body with the new symbol, and setting \
the new symbol to the the right-hand side of the initial assignment. Note \
that variables made local by ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " are not required to have an initial value, although it is often good style \
to assign one. ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " is a lot faster than ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", so use ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " unless you plan on making multiple assignments to the variable. And if you \
do plan on making multiple assignments to the variable, ask yourself if there\
\[CloseCurlyQuote]s a better way to write the code (see \
functionalProgramming.nb). "
}], "Text",
 CellChangeTimes->{{3.617818192615155*^9, 3.6178183250664988`*^9}, {
  3.617818446464737*^9, 3.617818641457382*^9}, {3.6476192680452023`*^9, 
  3.64761929823672*^9}},ExpressionUUID->"57fae955-08ad-48e3-abe1-\
2ad4b8f7711f"],

Cell[TextData[{
 "As a general rule, nearly all function definitions that are more than one \
line long should start with either a ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " or a ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.6178187073350163`*^9, 
  3.617818747094042*^9}},ExpressionUUID->"e8f6839f-9a4b-43df-b4d8-\
9f9503bb65b4"],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}},ExpressionUUID->"27de67a4-31a5-4316-8c00-\
4735ba58838c"],

Cell["\<\
Read the documentation page tutorial/ModulesAndLocalVariables through the \
section \[OpenCurlyDoubleQuote]Assigning initial values to local variables\
\[CloseCurlyDoubleQuote]. You can skip the last section, \
\[OpenCurlyDoubleQuote]Using local variables in definitions with conditions\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.583519365860116*^9, 3.5835193868511057`*^9}, {
  3.584134260939145*^9, 3.584134262364126*^9}, {3.584470420420929*^9, 
  3.584470421316113*^9}, {3.585047804119833*^9, 
  3.585047859485379*^9}},ExpressionUUID->"a498e512-4338-459b-b073-\
5db5568c345f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sequencing expressions", "Subsubsection",
 CellChangeTimes->{{3.5835964583747797`*^9, 
  3.5835964622584467`*^9}},ExpressionUUID->"bd3b7422-1fc6-4aad-89aa-\
6d1683bc9435"],

Cell["\<\
When an expression is followed by a semicolon, it is evaluated, its return \
value is ignored, and the next expression is evaluated.\
\>", "Text",
 CellChangeTimes->{{3.5835964661959333`*^9, 3.58359650769718*^9}, 
   3.584450892250449*^9},ExpressionUUID->"440bdec1-166c-4527-bf85-\
0fa554d92591"],

Cell[BoxData[
 RowBox[{"30", "!"}]], "Input",
 CellChangeTimes->{{3.583596510799624*^9, 3.583596521899374*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"5a280448-264c-4402-b056-9ae06b107090"],

Cell[BoxData[
 RowBox[{
  RowBox[{"300", "!"}], ";", " ", 
  RowBox[{
  "Print", "[", "\"\<That was too long to print!\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.583596525885705*^9, 3.583596542749804*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"951cc97f-5702-4037-a66f-ff945b5c42b5"],

Cell["\<\
Suppressing output is particularly useful when writing procedural style \
programs, where you want to take a sequence of steps with side effects, such \
as modifying the values of local variables, printing, etc., before finally \
returning a value.\
\>", "Text",
 CellChangeTimes->{{3.583596565715884*^9, 3.583596636074266*^9}, {
   3.584135197967331*^9, 3.584135223169643*^9}, 
   3.584470463628044*^9},ExpressionUUID->"a5762c1d-d4a7-4292-996d-\
fce57956cc65"],

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "=", "1"}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{"x", "*", "i"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2", ",", "n"}], "}"}]}], "]"}], ";", " ", "x"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5835966460466967`*^9, 3.5835966518772984`*^9}, {
  3.5835967983185463`*^9, 3.58359699142069*^9}, {3.5835971301905727`*^9, 
  3.5835971405180264`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"8a0fb8b1-1411-4b85-bd44-8dd816d179b1"],

Cell[BoxData[
 RowBox[{"factorial", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.583596916291975*^9, 3.5835969205800657`*^9}, {
  3.583597067788701*^9, 3.583597088698106*^9}, {3.583597160296145*^9, 
  3.5835971653791647`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"daad5854-3244-4c10-90a6-b7e40390c1c8"],

Cell[TextData[{
 "Note the semicolon after the ",
 StyleBox["Do",
  FontFamily->"Courier"],
 " expression -- we don\[CloseCurlyQuote]t care what\[CloseCurlyQuote]s \
returned by ",
 StyleBox["Do",
  FontFamily->"Courier"],
 ", but after it\[CloseCurlyQuote]s done modifying ",
 StyleBox["x",
  FontFamily->"Courier"],
 ", we want to return the value of ",
 StyleBox["x",
  FontFamily->"Courier"],
 "."
}], "Text",
 CellChangeTimes->{{3.583597184700677*^9, 
  3.583597239658106*^9}},ExpressionUUID->"874e8585-bce7-45c4-b97f-\
8a7b39dfcfea"],

Cell[CellGroupData[{

Cell["Practice: Local variables and sequencing expressions", \
"Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583596780716548*^9, 
  3.5835967844023867`*^9}},ExpressionUUID->"48589d04-5ad5-4d5f-8b7f-\
7f26a6b83a37"],

Cell[TextData[{
 "Write a function ",
 StyleBox["randomDNA[n_]",
  FontFamily->"Courier"],
 " that prints out a string of length ",
 StyleBox["n",
  FontFamily->"Courier"],
 " consisting of a random sequence of \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]G\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]T\
\[CloseCurlyDoubleQuote]. On the right hand side of your function definition, \
start with a ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " that defines a local constant ",
 StyleBox["nucleotides",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " whose value is the 4-element list of strings ",
 StyleBox["{\[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]G\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]T\[CloseCurlyDoubleQuote]}",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". Inside the ",
 StyleBox["With",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", use ",
 StyleBox["Module",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to define a local variable ",
 StyleBox["output",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " where you collect the string to output in the end. Use ",
 StyleBox["Do",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to make a loop that iterates ",
 StyleBox["n",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " times and on each iteration picks a random integer between 1 and 4 (using ",
 StyleBox["RandomInteger",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "), uses it to access the corresponding element of the nucleotide list \
(remember double square brackets for accessing a list), and adds that element \
on to the end of the output string (look up the reference documentation for \
",
 StyleBox["StringJoin",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and optionally read tutorial/OperationsOnStrings). Once you create the new \
string with the new nucleotide at the end, you\[CloseCurlyQuote]ll have to \
set ",
 StyleBox["output",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " to that new string to save it for the next iteration."
}], "Text",
 CellChangeTimes->{{3.583517679589593*^9, 3.5835177967167387`*^9}, {
  3.583517855353656*^9, 3.583518007882264*^9}, {3.583519558730073*^9, 
  3.583519649225787*^9}, {3.58358993213759*^9, 3.583590077850716*^9}, {
  3.583590121585725*^9, 3.583590192898291*^9}, {3.583590300107471*^9, 
  3.5835903324441433`*^9}, {3.5850044910540257`*^9, 3.585004493420622*^9}, {
  3.617818844405232*^9, 3.617818858380362*^9}, {3.6181349323753633`*^9, 
  3.618134985559901*^9}, {3.618136043952024*^9, 
  3.618136075941599*^9}},ExpressionUUID->"c5760eb0-49b0-4da3-9321-\
30b56faad8e0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Branching", "Subsection",
 CellChangeTimes->{{3.583508115068471*^9, 3.583508127537744*^9}, 
   3.5835132732886868`*^9, {3.5835133065487547`*^9, 
   3.583513313419819*^9}},ExpressionUUID->"db8c9005-a6af-413a-b632-\
2d814bdf7010"],

Cell[TextData[{
 "The only branching construct you are likely to need is ",
 StyleBox["If",
  FontFamily->"Courier"],
 ":"
}], "Text",
 CellChangeTimes->{{3.583591857036968*^9, 
  3.5835918854740553`*^9}},ExpressionUUID->"f5fee483-cde0-4441-9116-\
817f90db1946"],

Cell[BoxData[
 RowBox[{
  RowBox[{"takeoff", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", ">", "1"}], ",", 
    RowBox[{"x", "^", "3"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5835918928594418`*^9, 3.5835919488025837`*^9}, {
  3.58359200967343*^9, 3.5835920379009237`*^9}, {3.583592092351173*^9, 
  3.5835920926686277`*^9}, {3.617876706026178*^9, 3.617876706523731*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"284d21bb-0cfd-43a2-a02e-34a61dba932b"],

Cell[BoxData[
 RowBox[{"takeoff", "[", "0.5", "]"}]], "Input",
 CellChangeTimes->{{3.5835919564897337`*^9, 3.583591972386897*^9}, {
  3.5835920525237226`*^9, 3.583592053950227*^9}, {3.583592103667612*^9, 
  3.58359210465126*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"3b9a5ea5-5c13-478d-b657-5819d1c233fc"],

Cell[BoxData[
 RowBox[{"takeoff", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.583591975384322*^9, 3.58359198248238*^9}, {
  3.583592061149267*^9, 3.583592064380733*^9}, {3.583592109789077*^9, 
  3.583592110058578*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"9bf8d3e3-a1e5-4683-ace9-4c116e01dff1"],

Cell[BoxData[
 RowBox[{"takeoff", "[", "1.5", "]"}]], "Input",
 CellChangeTimes->{{3.583591984383312*^9, 3.583591990492013*^9}, {
  3.583592072060067*^9, 3.583592078340538*^9}, {3.5835921155721693`*^9, 
  3.583592115786072*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"d3445918-37b0-410b-8e8b-5961d45f5495"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"takeoff", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", " ", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.583592119698324*^9, 3.583592181324089*^9}, {
  3.6178767377719393`*^9, 3.617876738122815*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"281a241c-b36a-48dd-92f6-6b41ba095dbc"],

Cell[TextData[{
 "Unlike other ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions, the arguments to ",
 StyleBox["If",
  FontFamily->"Courier"],
 " are not all evaluated first and then passed in to ",
 StyleBox["If",
  FontFamily->"Courier"],
 ". Only the first argument is evaluated -- if it returns ",
 StyleBox["True",
  FontFamily->"Courier"],
 " the second argument is evaluated and its value is returned, but the third \
argument is never evaluated. If it returns ",
 StyleBox["False",
  FontFamily->"Courier"],
 ", the third argument is evaluated but the second is not. If the arguments \
are expressions whose evaluation has side effects, like those involving \
Print, the side effects will not occur as they would in arguments to a normal \
function:"
}], "Text",
 CellChangeTimes->{{3.5835927507863827`*^9, 
  3.5835929801457853`*^9}},ExpressionUUID->"fe2f94d5-8290-43ca-821a-\
8e7c3e4facad"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"3", ">", "7"}], ",", " ", 
   RowBox[{"Print", "[", "\"\<It is!\>\"", "]"}], ",", " ", 
   RowBox[{"Print", "[", "\"\<It isn't!\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5835929836539927`*^9, 3.583593031986656*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"b3dda451-1a64-45b3-81ec-9da92f0eef29"],

Cell[TextData[{
 "In peculiar ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " style, an ",
 StyleBox["If",
  FontFamily->"Courier"],
 " expression whose first argument does not evaluate to either ",
 StyleBox["True",
  FontFamily->"Courier"],
 " or ",
 StyleBox["False",
  FontFamily->"Courier"],
 " remains unevaluated:"
}], "Text",
 CellChangeTimes->{{3.583592231812726*^9, 3.583592303290517*^9}, {
  3.5835931737659187`*^9, 
  3.583593188970536*^9}},ExpressionUUID->"425aef58-5832-4dd8-be6e-\
6aa49e0d49ed"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"z", ">", "10"}], ",", "1", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.583592322590314*^9, 3.583592336772087*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"b2a1dca7-9202-4ad8-b8b4-26b8cc8fabc8"],

Cell[TextData[{
 "Since ",
 StyleBox["z",
  FontFamily->"Courier"],
 " is not defined the whole expression remains unevaluated. If you provide If \
with a fourth argument, it will evaluate that in case the first argument \
doesn\[CloseCurlyQuote]t yield a Boolean:"
}], "Text",
 CellChangeTimes->{{3.58359234196377*^9, 3.583592451065941*^9}, {
  3.583592501334112*^9, 3.583592506857657*^9}, {3.584470669331595*^9, 
  3.584470669899815*^9}},ExpressionUUID->"e803fa59-5295-4002-8b58-\
4cfafa13698e"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"z", ">", "10"}], ",", "1", ",", "0", ",", " ", 
   RowBox[{"Print", "[", "\"\<Error! z is not defined.\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.583592322590314*^9, 3.583592336772087*^9}, {
  3.5835924552619457`*^9, 3.583592488420425*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"2307993f-fb52-4d39-b4b4-fa35cb9970ca"],

Cell[CellGroupData[{

Cell[TextData[{
 "Practice: Using ",
 StyleBox["If",
  FontFamily->"Courier",
  FontWeight->"Plain"]
}], "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583593252177696*^9, 
  3.5835932568982153`*^9}},ExpressionUUID->"8858ca86-db85-45f7-8d67-\
2d8bb17a6545"],

Cell[TextData[{
 "Write a function called ",
 StyleBox["reverseString",
  FontFamily->"Courier"],
 " that takes a single argument, tests whether it is a string (see ",
 StyleBox["StringQ",
  FontFamily->"Courier"],
 "), if so returns its reverse (see ",
 StyleBox["StringReverse",
  FontFamily->"Courier"],
 "), and if not prints an error message. Demonstrate your function on both a \
multi-character string and a non-string. ",
 "\[FilledSquare]"
}], "Text",
 CellChangeTimes->{{3.583593249427387*^9, 3.583593249705818*^9}, {
  3.583593687876289*^9, 
  3.583593808631219*^9}},ExpressionUUID->"b22d2cd1-71c9-4472-86ee-\
d084d168476d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reading and writing to a file", "Subsection",
 CellChangeTimes->{{3.5835081568402576`*^9, 3.583508159041904*^9}, {
  3.583594357692997*^9, 
  3.583594362514318*^9}},ExpressionUUID->"13e3693e-d9c2-4ad3-bf18-\
b933f0936634"],

Cell["\<\
At first, you\[CloseCurlyQuote]ll probably do a lot of simple code testing \
through the notebook interface, but when it comes to real data, you\
\[CloseCurlyQuote]ll need to read and write files. Let\[CloseCurlyQuote]s \
start with writing. \
\>", "Text",
 CellChangeTimes->{{3.583593838284127*^9, 
  3.583593873137949*^9}},ExpressionUUID->"776da484-f736-4748-9cb0-\
db8c286d46a2"],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}},ExpressionUUID->"338f101e-8687-4c12-8556-\
101b14ef854d"],

Cell[CellGroupData[{

Cell[TextData[{
 "Read the documentation page ",
 StyleBox["tutorial/ReadingAndWritingWolframSystemFiles",
  FontSlant->"Italic"],
 " up to and including the section \[OpenCurlyDoubleQuote]Saving Definitions \
of ",
 StyleBox["Wolfram Language",
  FontSlant->"Italic"],
 " Objects\[CloseCurlyDoubleQuote].  When you get to \
\[OpenCurlyDoubleQuote]Saving ",
 StyleBox["Wolfram Language",
  FontSlant->"Italic"],
 " Definitions in Encoded Form\[CloseCurlyDoubleQuote] you can abort your \
read."
}], "Item",
 CellChangeTimes->{{3.58504961516019*^9, 3.585049623311686*^9}, {
  3.681495280872357*^9, 
  3.6814953135642014`*^9}},ExpressionUUID->"21308635-4e50-411e-9a40-\
f4f135ce637a"],

Cell[TextData[{
 " Read ",
 StyleBox["tutorial/NamingAndFindingFiles",
  FontSlant->"Italic"],
 ". This is kind of long and you can read quickly through some of the latter \
parts. The important thing is to know what\[CloseCurlyQuote]s in this \
tutorial so you can come back to it later when you need to work with files \
more."
}], "Item",
 CellChangeTimes->{{3.58504961516019*^9, 
  3.585049687153483*^9}},ExpressionUUID->"e3db703f-4eb5-4a9c-a11e-\
5c61c1371736"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Reading and writing expressions", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583593252177696*^9, 
  3.5835932568982153`*^9}, {3.583594412524489*^9, 
  3.583594418409972*^9}},ExpressionUUID->"1002f113-ad74-4dd2-b4ec-\
c8936038a73f"],

Cell[TextData[{
 "The functions ",
 StyleBox["Put",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (equivalent to ",
 StyleBox[">>",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ") and ",
 StyleBox["Get",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (equivalent to ",
 StyleBox["<<",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ") exchange expressions with files. Since everything in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is an expression, you can read and write anything this way. Copy the code \
you wrote for generating a random DNA sequence, paste it into a new cell \
below this one, and modify it to take a second argument which will specify a \
directory path. (If you don\[CloseCurlyQuote]t know how to specify directory \
paths as strings on your system, use the menu sequence ",
 StyleBox["Insert->File Path",
  FontSlant->"Italic"],
 " and select a file to see its pathname.) Each time you call the new \
function, it should either create the file specified in the input path and \
put the new random DNA sequence into it (this is what happens if the file \
does not yet exist) or, if there is already a file by that name, it should \
read in the file assuming that the contents is a DNA sequence represented as \
a string, generate a new sequence, append the new sequence on to the end of \
the old one, and write the new sequence back out again. Test whether the file \
specified by the path argument exists using ",
 StyleBox["FileExistsQ",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ".  If so, use ",
 StyleBox["Get",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " (which returns the value of the last expression in the file) to initialize \
your DNA string. Then generate ",
 StyleBox["n",
  FontFamily->"Courier"],
 " random DNA letters, adding them on to the end of the string you read in. \
Finally, write out the new string to the filename provided using ",
 StyleBox["Put",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ", which will create the file if it doesn\[CloseCurlyQuote]t exist. ",
 StyleBox["Put",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " will also overwrite whatever was in the file before, which in this case is \
what you want. Demonstrate that your program works by calling it twice with \
the same filename, adding 5 letters the first time and 7 second. Note that \
the only thing you are reading and writing to files is the DNA sequence -- \
the code can sit in a new cell write below this one."
}], "Text",
 CellChangeTimes->{{3.583594432874387*^9, 3.58359446158661*^9}, {
   3.583594499729988*^9, 3.583594562969483*^9}, {3.583594668236843*^9, 
   3.583594681929487*^9}, {3.583594728114304*^9, 3.5835947299622583`*^9}, {
   3.583594763634069*^9, 3.5835947831460257`*^9}, {3.583595228593663*^9, 
   3.583595391154196*^9}, {3.583595687656233*^9, 3.5835957143211803`*^9}, {
   3.583595860851985*^9, 3.583596053730402*^9}, {3.583596124167262*^9, 
   3.5835961352031307`*^9}, {3.583596229181991*^9, 3.583596293850377*^9}, 
   3.584447212460146*^9, {3.584448244439622*^9, 3.584448260444366*^9}, {
   3.617877027471283*^9, 3.617877027770522*^9}, {3.6181361746972513`*^9, 
   3.61813651144776*^9}, {3.647619776670013*^9, 3.647619777238092*^9}, {
   3.712587038138937*^9, 
   3.712587057003901*^9}},ExpressionUUID->"75e5a849-9cf4-4630-bcef-\
4cc31c006379"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Syntax Coloring", "Subsection",
 CellChangeTimes->{{3.5844525813905487`*^9, 
  3.584452583990345*^9}},ExpressionUUID->"090cab0c-69ba-43aa-8e7d-\
7dfd586b30a2"],

Cell["\<\
Mathematica\[CloseCurlyQuote]s syntax coloring can often help you spot syntax \
errors.  

Undefined variables are colored dark blue:\
\>", "Text",
 CellChangeTimes->{{3.584452593663124*^9, 3.5844526425108137`*^9}, {
  3.584452844181183*^9, 3.584452845020204*^9}, {3.7125871823228188`*^9, 
  3.712587183114316*^9}},ExpressionUUID->"494dfca7-c967-423f-af38-\
e8c08636deb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Tabel", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "10"}]}]}]}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"The", " ", "function"}], ",", " ", "Tabel", ",", " ", 
    RowBox[{"is", " ", "colored", " ", "blue", " ", "because", " ", "it", " ", 
     RowBox[{"undefined", ".", "  ", "Tabel"}], " ", "is", " ", "probably", 
     " ", "a", " ", 
     RowBox[{"typo", "."}]}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{3.584471142431849*^9},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[67]:=",ExpressionUUID->"157bd667-adaf-4285-afdd-9a43b2c509ec"],

Cell[TextData[{
 "(Note: This cell won\[CloseCurlyQuote]",
 StyleBox["t evaluate because the square brackets are not balanced, not \
because of the undefined variables.) Defined variables are colored black.  \
(Aside -- many of the variables in input cells in this notebook will appear \
blue even though they have been defined in previous input cells. That\
\[CloseCurlyQuote]s because cells are not evaluated by default when a \
notebook is loaded.) Once a variable is defined, ",
  FontColor->GrayLevel[0]],
 StyleBox["all",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" instances of the variable in the notebook will be defined and \
colored black.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.71258713823377*^9, 3.712587188163456*^9}, {
  3.712587239734886*^9, 3.7125873114710093`*^9}, {3.712587341919736*^9, 
  3.712587342820632*^9}},ExpressionUUID->"1cf20387-08b6-46c2-b18b-\
2cc93ff1f6d5"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.584452893289674*^9, 3.584452904448132*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->
  "In[236]:=",ExpressionUUID->"d3eeab1a-b261-4069-ae94-6f89e97bbacc"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notes missing arguments with a red carrot:"
}], "Text",
 CellChangeTimes->{{3.584452931747706*^9, 3.584452954196576*^9}, {
  3.584471026443902*^9, 3.584471027620002*^9}, {3.617877676791231*^9, 
  3.617877701615237*^9}},ExpressionUUID->"0b08e300-a66b-4e9d-8042-\
f7ebde8086d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.584452939717114*^9, 3.584452947158801*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"3a818f82-40cd-491f-a78b-2e6fc823fb5b"],

Cell[BoxData["x"], "Output",
 CellChangeTimes->{3.584452947748825*^9, 3.584468219665874*^9, 
  3.584468489477972*^9, 3.584471865583605*^9},
 CellLabel->
  "Out[236]=",ExpressionUUID->"37e6bd4d-56a4-4e05-9880-6ade9366f062"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " highlights extra arguments in red:"
}], "Text",
 CellChangeTimes->{{3.584452969228348*^9, 3.58445297393468*^9}, {
  3.584471020318222*^9, 3.584471022548151*^9}, {3.6178777090639668`*^9, 
  3.6178777162791357`*^9}},ExpressionUUID->"6e1c0722-3307-4011-bf4f-\
9013a01a105a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"x", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.584452977510995*^9, 3.584452996927787*^9}},
 CellLabel->
  "In[237]:=",ExpressionUUID->"63d6d8a0-aef2-4aff-a882-8304e12755af"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Length", "::", "argx"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Length\\)\[NoBreak] called with \[NoBreak]\\!\\(2\
\\)\[NoBreak] arguments; 1 argument is expected. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argx\\\", ButtonNote -> \
\\\"Length::argx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.5844529976188107`*^9, 3.584468219750704*^9, 
  3.584468489524403*^9, 3.584471865635549*^9},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"bf95e572-13ac-44b9-99e8-4c1d3be0b2b3"],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"x", ",", "1"}], "]"}]], "Output",
 CellChangeTimes->{3.584452997622038*^9, 3.584468219754171*^9, 
  3.584468489526723*^9, 3.584471865637786*^9},
 CellLabel->
  "Out[237]=",ExpressionUUID->"99229bac-c94d-4092-ae3b-35750d396c3b"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " highlights arguments of user-defined functions in green:"
}], "Text",
 CellChangeTimes->{{3.584453020932613*^9, 3.5844530332359753`*^9}, {
  3.584471063885538*^9, 3.584471064860277*^9}, {3.61787772603329*^9, 
  3.617877727654711*^9}},ExpressionUUID->"d33e0f95-3ecf-472f-840b-\
b856ee7e8bf6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.584453034937583*^9, 3.584453040012398*^9}},
 CellLabel->
  "In[238]:=",ExpressionUUID->"7ae4bfcb-343e-4dff-962d-2731b9d2dd4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Aborting calculations", "Subsection",
 CellChangeTimes->{{3.584452958765066*^9, 3.584452963503364*^9}, {
  3.584453162736266*^9, 
  3.584453173139114*^9}},ExpressionUUID->"047d6522-5d08-4b8f-bbb2-\
66ce926a29ce"],

Cell[TextData[{
 "To abort a calculation, on the menu select ",
 StyleBox["Evaluation -> Abort Calculation",
  FontSlant->"Italic"],
 ".  If this doesn\[CloseCurlyQuote]t work, try ",
 StyleBox["Evaluation -> Quit Kernel/Local",
  FontSlant->"Italic"],
 ".  This will stop the kernel, but it will not close your notebook.  To \
restart the kernel, evaluate a cell in the notebook.  A third option is to \
quit Mathematica; however, all unsaved changes will be lost."
}], "Text",
 CellChangeTimes->{{3.58445318156131*^9, 3.5844533254012423`*^9}, {
  3.585006023184924*^9, 
  3.5850060240873337`*^9}},ExpressionUUID->"b0eeeefd-6ee3-4436-a5dd-\
220a96ab1749"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1289, 1324},
WindowMargins->{{291, Automatic}, {Automatic, -390}},
ShowSelection->True,
CellLabelAutoDelete->False,
Magnification->1.25,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Code"]]}, WindowMargins -> {{876, Automatic}, {Automatic, 94}},
   Visible -> False, FrontEndVersion -> 
  "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3617776617-3499402"->{
  Cell[34315, 834, 3917, 61, 198, "Print",ExpressionUUID->"a43925ff-8dc3-4f77-b056-14068c1d2298",
   CellTags->"Info3617776617-3499402"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3617776617-3499402", 127827, 3251}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 131, 3, 37, "Input",ExpressionUUID->"f4e321e7-8a3f-4112-8a72-e114f44ce6fb"],
Cell[CellGroupData[{
Cell[714, 27, 224, 7, 123, "Title",ExpressionUUID->"211e0997-10db-4dba-a9ac-db9007c81901"],
Cell[CellGroupData[{
Cell[963, 38, 177, 3, 84, "Section",ExpressionUUID->"e951116b-52c3-4fb9-8836-08d22bccf70b"],
Cell[1143, 43, 492, 9, 102, "Text",ExpressionUUID->"f2fc3daa-9c0d-4025-b38c-2c89ecc4b2d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1672, 57, 164, 3, 84, "Section",ExpressionUUID->"49f11fa7-3dbe-4560-97fc-c9b239e1bd76"],
Cell[CellGroupData[{
Cell[1861, 64, 156, 3, 67, "Subsection",ExpressionUUID->"f5620567-e392-44cc-9763-2fd139e83424"],
Cell[2020, 69, 792, 14, 159, "Text",ExpressionUUID->"3d07da31-e372-49dc-ad10-eae3ef3376d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2849, 88, 366, 9, 67, "Subsection",ExpressionUUID->"a47ab05f-f86b-4f8e-bbd9-825f8ddce9cf"],
Cell[3218, 99, 2403, 51, 188, "Text",ExpressionUUID->"d73dea62-a679-4216-b56e-6a0573061183"],
Cell[CellGroupData[{
Cell[5646, 154, 224, 7, 37, "Input",ExpressionUUID->"50a84a43-4f2c-408f-aa08-b8710ecbb95b"],
Cell[5873, 163, 274, 8, 42, "Output",ExpressionUUID->"b89267f6-d81a-4916-a8da-e2d2aca79ed5"]
}, Open  ]],
Cell[6162, 174, 1252, 25, 131, "Text",ExpressionUUID->"ed2a9c1d-76c5-409e-b769-6d1eab95b646"],
Cell[CellGroupData[{
Cell[7439, 203, 261, 8, 37, "Input",ExpressionUUID->"10e403b7-f49f-4808-8e5b-8950145136a3"],
Cell[7703, 213, 235, 6, 43, "Output",ExpressionUUID->"0d514ac1-01e4-4a7d-b694-92ada072c724"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7975, 224, 464, 8, 41, "Subsubsubsection",ExpressionUUID->"c384d41d-25d6-4b91-a177-e6d35bd71d72"],
Cell[8442, 234, 3161, 74, 246, "Text",ExpressionUUID->"917da560-9ef5-4b25-be40-0ac8945c73c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11640, 313, 482, 8, 41, "Subsubsubsection",ExpressionUUID->"f099f445-e0bd-4332-9e92-e9eccc81a9c8"],
Cell[12125, 323, 828, 15, 102, "Text",ExpressionUUID->"7c1c35fd-9053-4f22-879b-953648025da9"],
Cell[CellGroupData[{
Cell[12978, 342, 1073, 17, 145, "ItemNumbered",ExpressionUUID->"01ffee48-3d7e-4598-ad40-7489fdd17d1b"],
Cell[14054, 361, 704, 13, 67, "ItemNumbered",ExpressionUUID->"ada033ab-8a09-4707-8821-f3a36e9c9e07"],
Cell[14761, 376, 910, 18, 67, "ItemNumbered",ExpressionUUID->"8dee411b-0917-41b3-8d6a-ff1cdf105704"],
Cell[15674, 396, 650, 15, 67, "ItemNumbered",ExpressionUUID->"7b36a254-e13a-4013-8293-8eb2f65c2b19"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16385, 418, 176, 3, 67, "Subsection",ExpressionUUID->"4cf870a1-2da9-4a26-bf14-57d363afb5ee"],
Cell[16564, 423, 3501, 69, 418, "Text",ExpressionUUID->"611c0c51-096d-4ba4-b207-4933afae9811"],
Cell[CellGroupData[{
Cell[20090, 496, 380, 6, 41, "Subsubsubsection",ExpressionUUID->"6e00bed1-c212-4385-bb2d-d19c05756d06"],
Cell[20473, 504, 712, 16, 73, "Text",ExpressionUUID->"8ed6bdbe-b12b-40d3-8e59-730a870c4846"],
Cell[21188, 522, 462, 11, 37, "Input",ExpressionUUID->"e2c11ca2-3514-4216-97be-95f11988c487"],
Cell[21653, 535, 2249, 54, 188, "Text",ExpressionUUID->"36bbd998-1d9e-45bb-862b-b8f7c18d235a"],
Cell[23905, 591, 491, 9, 102, "Text",ExpressionUUID->"6ba3a706-aa1e-4827-b010-89a3d7da1b32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24433, 605, 420, 6, 41, "Subsubsubsection",ExpressionUUID->"14aad8f5-d57c-4146-b497-db6e199674db"],
Cell[24856, 613, 301, 5, 44, "Text",ExpressionUUID->"181e6174-0ace-46e0-9ef4-8572face0752"],
Cell[25160, 620, 243, 6, 44, "Text",ExpressionUUID->"1ff1ec24-2d97-4842-8c0a-841cb03e477b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25464, 633, 374, 9, 84, "Section",ExpressionUUID->"b14fc5f4-560e-456c-9262-1f5557a16aac"],
Cell[25841, 644, 1937, 32, 274, "Text",ExpressionUUID->"33d39dfb-32d4-4e76-874b-1c0d9771f893"],
Cell[CellGroupData[{
Cell[27803, 680, 705, 15, 93, "Item",ExpressionUUID->"0915695c-e601-44cb-87b2-0158d3af9d67"],
Cell[28511, 697, 613, 13, 67, "Item",ExpressionUUID->"2934ba54-4a6a-4e76-bdda-1e8fe1c5108b"],
Cell[29127, 712, 388, 9, 40, "Item",ExpressionUUID->"9aa6fdf6-1c02-4ebd-aff5-80c71e26ba4d"],
Cell[29518, 723, 1242, 24, 93, "Item",ExpressionUUID->"f437c261-c00c-4d1c-aba3-6816afdf01ff"],
Cell[CellGroupData[{
Cell[30785, 751, 237, 6, 34, "Subitem",ExpressionUUID->"d520828f-bcb9-4cc7-9e2e-71e8ffce098e"],
Cell[31025, 759, 739, 12, 106, "Subitem",ExpressionUUID->"5f433ade-ff44-446d-a21f-d8ed23ec1749"],
Cell[31767, 773, 508, 9, 82, "Subitem",ExpressionUUID->"d700b297-136f-4bff-9595-cb36d48a79f2"],
Cell[32278, 784, 395, 8, 58, "Subitem",ExpressionUUID->"e4a5077b-1b36-4e61-8902-9c8675ad6a2c"],
Cell[32676, 794, 795, 13, 130, "Subitem",ExpressionUUID->"93008e14-2abf-4f8f-9aa4-308dc1ac904b"]
}, Open  ]]
}, Open  ]],
Cell[33498, 811, 590, 13, 73, "Text",ExpressionUUID->"47d5e4a1-50ee-4469-a3b0-c99af8c7a44e"],
Cell[CellGroupData[{
Cell[34113, 828, 199, 4, 37, "Input",ExpressionUUID->"fdde3c59-6cf3-4eb4-962d-5971348efd91"],
Cell[34315, 834, 3917, 61, 198, "Print",ExpressionUUID->"a43925ff-8dc3-4f77-b056-14068c1d2298",
 CellTags->"Info3617776617-3499402"]
}, Open  ]],
Cell[38247, 898, 589, 14, 73, "Text",ExpressionUUID->"b583bd0d-c263-48ab-8d2f-6387459608dc"],
Cell[CellGroupData[{
Cell[38861, 916, 526, 8, 41, "Subsubsubsection",ExpressionUUID->"00795f31-aad2-4152-a778-9961f2b15c45"],
Cell[39390, 926, 310, 9, 44, "Text",ExpressionUUID->"4347baea-71fd-474c-b5eb-b0016d3e0d23"],
Cell[CellGroupData[{
Cell[39725, 939, 708, 14, 67, "ItemNumbered",ExpressionUUID->"74ced674-779d-4463-bec9-ac506e364bc1"],
Cell[40436, 955, 998, 26, 93, "ItemNumbered",ExpressionUUID->"46243fd1-de38-4f10-8f7a-ff410fcf757e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41483, 987, 170, 3, 67, "Subsection",ExpressionUUID->"eab71766-9229-4b15-9081-710339ac5389"],
Cell[41656, 992, 949, 18, 159, "Text",ExpressionUUID->"fe32ca13-afb2-4482-9b93-980250bf3a60"],
Cell[42608, 1012, 601, 11, 93, "Item",ExpressionUUID->"937e2571-dab2-436f-9dbd-39b83bd0d0e8"],
Cell[CellGroupData[{
Cell[43234, 1027, 480, 7, 41, "Subsubsubsection",ExpressionUUID->"7f671825-feb8-44c0-91a6-c1882a429ab9"],
Cell[43717, 1036, 1149, 20, 159, "Text",ExpressionUUID->"20d72488-3904-4027-ba52-a5a33074c2c2"],
Cell[CellGroupData[{
Cell[44891, 1060, 776, 19, 67, "ItemNumbered",ExpressionUUID->"4138b638-e9e8-4fbf-b8cc-25800c8ccc67"],
Cell[45670, 1081, 676, 11, 67, "ItemNumbered",ExpressionUUID->"63293e7a-c57e-4cea-876b-77687ab725c5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46407, 1099, 267, 4, 67, "Subsection",ExpressionUUID->"bbc507b0-be6f-4f49-9d5e-2c380b42a088"],
Cell[46677, 1105, 663, 11, 102, "Text",ExpressionUUID->"aa2810f6-9a07-4930-8cdc-93002ef71688"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47389, 1122, 173, 3, 84, "Section",ExpressionUUID->"f8d0b1d0-a789-4a34-b9a7-cf5f412f41a1"],
Cell[CellGroupData[{
Cell[47587, 1129, 156, 3, 67, "Subsection",ExpressionUUID->"f05410dc-cdbb-4fd0-874a-bb340770a3dc"],
Cell[47746, 1134, 617, 11, 102, "Text",ExpressionUUID->"d899599b-54d9-4cd8-9e58-dfa5d27902c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48400, 1150, 229, 4, 67, "Subsection",ExpressionUUID->"c2ab6080-dad7-4524-8c78-80b8201a161b"],
Cell[48632, 1156, 423, 8, 73, "Text",ExpressionUUID->"18bd1706-9cda-4be2-8ac0-0e690eba8a2a"],
Cell[49058, 1166, 135, 3, 37, "Input",ExpressionUUID->"de4b8606-710d-4864-a969-33aec65e6244"],
Cell[49196, 1171, 144, 3, 37, "Input",ExpressionUUID->"a4daa8f7-d33e-46e3-8f00-14126ed1f367"],
Cell[49343, 1176, 275, 6, 44, "Text",ExpressionUUID->"a6cdc6d5-ace7-44a5-b2e4-e3ebbfa28a72"],
Cell[49621, 1184, 201, 4, 37, "Input",ExpressionUUID->"5773eee0-c78b-4197-8ff4-6fae5661206c"],
Cell[49825, 1190, 135, 3, 37, "Input",ExpressionUUID->"82b1bce5-562a-429b-a41f-f896dcc9e58c"],
Cell[49963, 1195, 669, 13, 102, "Text",ExpressionUUID->"218c4047-c6d5-48c2-a78e-fce934fa1563"],
Cell[50635, 1210, 136, 3, 37, "Input",ExpressionUUID->"7cea6d63-4b0c-48b5-a635-e6906c1435cf"],
Cell[50774, 1215, 218, 6, 37, "Input",ExpressionUUID->"7b0eef62-7177-4437-8a29-26e806c375f3"],
Cell[50995, 1223, 344, 10, 41, "Input",ExpressionUUID->"76ec4e5f-ed89-42f4-a4f1-bfcdad6d455f"],
Cell[51342, 1235, 1383, 26, 246, "Text",ExpressionUUID->"e275c3b3-3885-42e2-b793-6ba80d65398f"],
Cell[CellGroupData[{
Cell[52750, 1265, 175, 4, 37, "Input",ExpressionUUID->"ab5812d3-f8e1-4a44-b1c2-41f5cf48e9f8"],
Cell[52928, 1271, 158, 3, 56, "Output",ExpressionUUID->"7f75a60b-8227-41b9-8fb2-53bd58cd088b"]
}, Open  ]],
Cell[53101, 1277, 282, 7, 37, "Input",ExpressionUUID->"9527246c-d979-4b21-b8ac-332ff1e13786"],
Cell[53386, 1286, 649, 17, 73, "Text",ExpressionUUID->"1ec5eadd-f966-4af0-a130-961807f1408c"],
Cell[54038, 1305, 176, 4, 37, "Input",ExpressionUUID->"160be160-dfbb-4dab-a100-e8ffe3189e51"],
Cell[54217, 1311, 293, 7, 37, "Input",ExpressionUUID->"0fc0d2d0-3b0f-4346-a2ac-c069f5c4471d"],
Cell[54513, 1320, 802, 16, 102, "Text",ExpressionUUID->"a8bed37a-2aaf-48e4-8c54-f024136fe022"],
Cell[55318, 1338, 202, 5, 37, "Input",ExpressionUUID->"59831b60-7254-492a-b5cb-7602aea4b19b"],
Cell[55523, 1345, 155, 3, 37, "Input",ExpressionUUID->"d9ed44d1-0e4a-4023-8879-e8cf58c72aae"],
Cell[55681, 1350, 1451, 33, 188, "Text",ExpressionUUID->"fb66ea62-8ab9-446f-b2b1-e6df5f9a9f48"],
Cell[57135, 1385, 203, 5, 37, "Input",ExpressionUUID->"fd4d4430-3192-4036-a411-f01942496e6f"],
Cell[57341, 1392, 1371, 27, 73, "Text",ExpressionUUID->"3f4c5683-29b8-43d3-a4fa-4e8fb5825e0e"],
Cell[58715, 1421, 155, 3, 37, "Input",ExpressionUUID->"e1e49ac8-fc2f-4c24-9727-ca8648a8b67d"],
Cell[58873, 1426, 836, 14, 73, "Text",ExpressionUUID->"aeb2a3ea-215b-4be2-8aeb-1cae79f9831e"],
Cell[59712, 1442, 183, 4, 37, "Input",ExpressionUUID->"8e1ac973-a038-4c3d-80bc-c57fd2a5dfae"],
Cell[59898, 1448, 214, 3, 37, "Input",ExpressionUUID->"629766e9-e86b-412e-86dc-8aa65828826e"],
Cell[60115, 1453, 312, 7, 44, "Text",ExpressionUUID->"26445aea-c95a-43bd-aeb5-6f0bb401b716"],
Cell[60430, 1462, 324, 8, 37, "Input",ExpressionUUID->"da1ec615-e824-4546-84a0-ed49b8747982"],
Cell[60757, 1472, 234, 6, 44, "Text",ExpressionUUID->"cc7edd13-fa17-415b-9f99-41854c8bd552"],
Cell[60994, 1480, 243, 5, 37, "Input",ExpressionUUID->"648bf620-ea3e-4d1c-850b-ab389b759dc4"],
Cell[61240, 1487, 754, 18, 102, "Text",ExpressionUUID->"91f67c05-4094-49e5-933f-e963d1a804dc"],
Cell[61997, 1507, 222, 4, 37, "Input",ExpressionUUID->"7cbd443b-cda1-4dbd-9593-0ed04a5269b1"],
Cell[62222, 1513, 723, 13, 73, "Text",ExpressionUUID->"356f4bba-8246-4cae-a858-1b67238402bb"],
Cell[62948, 1528, 323, 7, 37, "Input",ExpressionUUID->"ff98a193-51c7-45a5-b38d-d4d88b780388",
 Evaluatable->True],
Cell[63274, 1537, 2375, 74, 140, "Text",ExpressionUUID->"e13b3d94-f4ed-4bc1-9517-8e393f835271"],
Cell[CellGroupData[{
Cell[65674, 1615, 168, 3, 45, "Subsubsubsection",ExpressionUUID->"f0ad952f-8b2e-4634-82ef-6ce286769c4a"],
Cell[65845, 1620, 1496, 30, 196, "Text",ExpressionUUID->"6ca61cf1-537e-47fe-857a-71dee19c2751"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67378, 1655, 238, 4, 45, "Subsubsubsection",ExpressionUUID->"ff120b48-d607-4529-974a-a6ff02d5552a"],
Cell[67619, 1661, 476, 11, 48, "Text",ExpressionUUID->"1106cda2-5f2a-4b41-8c06-53d98611fd1e"],
Cell[68098, 1674, 282, 6, 50, "Input",ExpressionUUID->"f399e7ff-cd73-4a25-a651-0d00e2aa2fd8"],
Cell[68383, 1682, 471, 10, 48, "Text",ExpressionUUID->"ca03e0c8-b435-4ea7-a997-54de388dd1c7"],
Cell[68857, 1694, 250, 5, 50, "Input",ExpressionUUID->"cd7394e4-51f4-4512-b02e-eb3399b5f9b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69144, 1704, 562, 8, 45, "Subsubsubsection",ExpressionUUID->"4a868d39-558e-435e-a961-5f07fe248261"],
Cell[69709, 1714, 322, 5, 47, "Text",ExpressionUUID->"a605d789-2d0e-46e1-ba7d-f0388579e7fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70068, 1724, 579, 10, 45, "Subsubsubsection",ExpressionUUID->"6a17e8d1-d96d-45d0-8750-f264802aa63c"],
Cell[CellGroupData[{
Cell[70672, 1738, 801, 19, 73, "ItemNumbered",ExpressionUUID->"c19f7089-180f-4663-a6bc-0e8c340bbd15"],
Cell[71476, 1759, 599, 10, 101, "ItemNumbered",ExpressionUUID->"42fd68e4-8595-4d9b-8d8b-ae91675c2c36"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72136, 1776, 194, 3, 67, "Subsection",ExpressionUUID->"7c50595e-9375-434a-b82c-33ebeb3554fd"],
Cell[72333, 1781, 1565, 24, 345, "Text",ExpressionUUID->"b1d7c9ab-4f18-4df3-af75-5720840ccbf5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73935, 1810, 158, 3, 67, "Subsection",ExpressionUUID->"8bd2df6b-2f9a-4e05-823b-ddd3ee283ccc"],
Cell[74096, 1815, 406, 8, 77, "Text",ExpressionUUID->"d7c522d5-3b0d-4e87-83a8-99606a7e3b49"],
Cell[74505, 1825, 422, 9, 50, "Input",ExpressionUUID->"a7fb8ea0-7808-4d3f-a343-8e11967286a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74964, 1839, 221, 4, 67, "Subsection",ExpressionUUID->"e02aa7d4-6300-41c7-87be-e7ab1c6fd499"],
Cell[75188, 1845, 520, 13, 48, "Text",ExpressionUUID->"a561b3fd-8535-4314-8543-35ed026205b6"],
Cell[CellGroupData[{
Cell[75733, 1862, 562, 8, 45, "Subsubsubsection",ExpressionUUID->"efbf3343-495c-4388-ac76-2656f0bd9f89"],
Cell[76298, 1872, 1477, 31, 230, "Text",ExpressionUUID->"66552d51-7198-4232-b242-a40ef9bb106b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77812, 1908, 561, 8, 45, "Subsubsubsection",ExpressionUUID->"5982435e-ba58-4e7e-ab60-315454d188d7"],
Cell[CellGroupData[{
Cell[78398, 1920, 614, 14, 75, "ItemNumbered",ExpressionUUID->"a45d2811-a84b-432a-9f41-23801666d729"],
Cell[79015, 1936, 890, 21, 103, "ItemNumbered",ExpressionUUID->"92eba4aa-df2c-4c78-ad8e-f5870a5deb31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79942, 1962, 452, 8, 50, "Input",ExpressionUUID->"56dcbf60-d0e8-464e-ae5f-c0b9d77d359e",
 Evaluatable->False],
Cell[80397, 1972, 370, 10, 36, "Print",ExpressionUUID->"4b4bc904-81cc-49d0-8f54-b3e0c820914c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80804, 1987, 382, 9, 50, "Input",ExpressionUUID->"4b05e2f4-4335-4c0a-8389-128ae066c9ce",
 Evaluatable->False],
Cell[81189, 1998, 355, 9, 36, "Print",ExpressionUUID->"1f64db46-5caf-44b6-8bac-d19691e8c08f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81581, 2012, 418, 9, 50, "Input",ExpressionUUID->"319631b9-0a5f-4eac-a30c-277c51c36907",
 Evaluatable->False],
Cell[82002, 2023, 369, 9, 36, "Print",ExpressionUUID->"1f8aa6c5-16b4-4a0d-81f8-6cff448778c4"]
}, Open  ]],
Cell[82386, 2035, 357, 7, 77, "Text",ExpressionUUID->"736a8c5f-24dc-47fe-83b2-ff9da6dfbc60"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82792, 2048, 196, 3, 67, "Subsection",ExpressionUUID->"f6f8cd80-ab6b-4c93-aed1-227c718525c2"],
Cell[82991, 2053, 980, 27, 140, "Text",ExpressionUUID->"ddd50e62-b474-4abc-ad98-1d3316cd461c"],
Cell[CellGroupData[{
Cell[83996, 2084, 562, 8, 45, "Subsubsubsection",ExpressionUUID->"277d5c05-71b4-456d-b4f5-1b32b8432ca8"],
Cell[CellGroupData[{
Cell[84583, 2096, 434, 7, 45, "ItemNumbered",ExpressionUUID->"803a3306-9f48-4a13-990e-cc30b5741cff"],
Cell[85020, 2105, 454, 12, 46, "ItemNumbered",ExpressionUUID->"09951a62-2149-435a-b1e6-a95750721e01"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[85523, 2123, 620, 9, 45, "Subsubsubsection",ExpressionUUID->"49022a07-69aa-43aa-a9bc-349caec00fde"],
Cell[86146, 2134, 600, 16, 48, "Text",ExpressionUUID->"cd147c10-bfa8-49cc-9353-c257249e7ac6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[86795, 2156, 276, 4, 67, "Subsection",ExpressionUUID->"fe6427cb-692c-4bd1-ab88-06fb140f8108"],
Cell[87074, 2162, 445, 8, 77, "Text",ExpressionUUID->"30d6803d-c6b2-4312-98de-59e8acb5c626"],
Cell[87522, 2172, 450, 9, 50, "Input",ExpressionUUID->"a2d2b84f-2b53-4f00-bc40-bbaebdf59bbf"],
Cell[87975, 2183, 249, 4, 50, "Input",ExpressionUUID->"9ba4ff73-5488-4c16-b760-3472492cc54c"],
Cell[88227, 2189, 223, 4, 50, "Input",ExpressionUUID->"80f52e11-9e00-40f1-b2c1-8afdb7dfdf30"],
Cell[88453, 2195, 172, 2, 50, "Input",ExpressionUUID->"e62ff185-da2b-49c5-a3f6-f8d8fbd8dfff"],
Cell[88628, 2199, 1153, 26, 228, "Text",ExpressionUUID->"eeb5f76c-c31f-4245-9887-36b362320324"],
Cell[89784, 2227, 516, 12, 108, "Text",ExpressionUUID->"bf3bb5bc-5b98-4e2c-80cb-17496b3db6e4"],
Cell[90303, 2241, 824, 22, 116, "Input",ExpressionUUID->"15959a22-43ba-4a6c-b46b-cfab694fb1b0"],
Cell[91130, 2265, 266, 4, 50, "Input",ExpressionUUID->"04ca98da-0e3a-4ec5-91fd-3cb1846ed9a3"],
Cell[91399, 2271, 494, 11, 78, "Text",ExpressionUUID->"f5ed3fde-9780-4e3e-99ab-cc2f5708c38b"],
Cell[91896, 2284, 789, 20, 50, "Input",ExpressionUUID->"ca1635af-05cd-411c-bcb6-1ede79f1a1fc"],
Cell[92688, 2306, 443, 11, 78, "Text",ExpressionUUID->"e24057e4-927d-435a-b3df-db1c5fc8c1f4"],
Cell[93134, 2319, 467, 13, 50, "Input",ExpressionUUID->"30e0c729-968a-4131-bd90-9bd1fd42cbbd"],
Cell[93604, 2334, 168, 3, 47, "Text",ExpressionUUID->"0ffa9866-fbb2-4c85-9598-f373ecbd80dd"],
Cell[93775, 2339, 205, 3, 50, "Input",ExpressionUUID->"276e56db-f8f0-47e1-9472-5afb640b5ab6"],
Cell[93983, 2344, 516, 17, 80, "Text",ExpressionUUID->"e90044ed-fab0-4122-8341-642efc5ce2ea"],
Cell[94502, 2363, 692, 17, 148, "Input",ExpressionUUID->"e55d6c2b-b2f2-4f76-aade-3fcce909cb61"],
Cell[95197, 2382, 201, 3, 50, "Input",ExpressionUUID->"bfe005bb-5eff-4792-a9e6-ce04518f9c42"],
Cell[95401, 2387, 380, 10, 78, "Text",ExpressionUUID->"8ccd8717-246c-4b52-9b64-07d947e6946f"],
Cell[95784, 2399, 1612, 37, 278, "Input",ExpressionUUID->"969f7740-603d-4016-9b1c-054e69a48560"],
Cell[97399, 2438, 346, 5, 50, "Input",ExpressionUUID->"f0d3ddde-3e51-409a-885d-7d3ef4cfd478"],
Cell[97748, 2445, 1367, 37, 200, "Text",ExpressionUUID->"57fae955-08ad-48e3-abe1-2ad4b8f7711f"],
Cell[99118, 2484, 423, 14, 80, "Text",ExpressionUUID->"e8f6839f-9a4b-43df-b4d8-9f9503bb65b4"],
Cell[CellGroupData[{
Cell[99566, 2502, 562, 8, 45, "Subsubsubsection",ExpressionUUID->"27de67a4-31a5-4316-8c00-4735ba58838c"],
Cell[100131, 2512, 609, 11, 77, "Text",ExpressionUUID->"a498e512-4338-459b-b073-5db5568c345f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100777, 2528, 177, 3, 55, "Subsubsection",ExpressionUUID->"bd3b7422-1fc6-4aad-89aa-6d1683bc9435"],
Cell[100957, 2533, 306, 6, 77, "Text",ExpressionUUID->"440bdec1-166c-4527-bf85-0fa554d92591"],
Cell[101266, 2541, 190, 3, 50, "Input",ExpressionUUID->"5a280448-264c-4402-b056-9ae06b107090"],
Cell[101459, 2546, 288, 6, 50, "Input",ExpressionUUID->"951cc97f-5702-4037-a66f-ff945b5c42b5"],
Cell[101750, 2554, 471, 9, 77, "Text",ExpressionUUID->"a5762c1d-d4a7-4292-996d-fce57956cc65"],
Cell[102224, 2565, 669, 18, 50, "Input",ExpressionUUID->"8a0fb8b1-1411-4b85-bd44-8dd816d179b1"],
Cell[102896, 2585, 309, 5, 50, "Input",ExpressionUUID->"daad5854-3244-4c10-90a6-b7e40390c1c8"],
Cell[103208, 2592, 539, 18, 80, "Text",ExpressionUUID->"874e8585-bce7-45c4-b97f-8a7b39dfcfea"],
Cell[CellGroupData[{
Cell[103772, 2614, 743, 11, 45, "Subsubsubsection",ExpressionUUID->"48589d04-5ad5-4d5f-8b7f-7f26a6b83a37"],
Cell[104518, 2627, 2794, 72, 293, "Text",ExpressionUUID->"c5760eb0-49b0-4da3-9321-30b56faad8e0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107373, 2706, 234, 4, 67, "Subsection",ExpressionUUID->"db8c9005-a6af-413a-b632-2d814bdf7010"],
Cell[107610, 2712, 262, 8, 48, "Text",ExpressionUUID->"f5fee483-cde0-4441-9116-817f90db1946"],
Cell[107875, 2722, 494, 10, 50, "Input",ExpressionUUID->"284d21bb-0cfd-43a2-a02e-34a61dba932b"],
Cell[108372, 2734, 308, 5, 50, "Input",ExpressionUUID->"3b9a5ea5-5c13-478d-b657-5819d1c233fc"],
Cell[108683, 2741, 302, 5, 50, "Input",ExpressionUUID->"9bf8d3e3-a1e5-4683-ace9-4c116e01dff1"],
Cell[108988, 2748, 307, 5, 50, "Input",ExpressionUUID->"d3445918-37b0-410b-8e8b-5961d45f5495"],
Cell[109298, 2755, 396, 9, 50, "Input",ExpressionUUID->"281a241c-b36a-48dd-92f6-6b41ba095dbc"],
Cell[109697, 2766, 916, 24, 170, "Text",ExpressionUUID->"fe2f94d5-8290-43ca-821a-8e7c3e4facad"],
Cell[110616, 2792, 364, 7, 50, "Input",ExpressionUUID->"b3dda451-1a64-45b3-81ec-9da92f0eef29"],
Cell[110983, 2801, 517, 18, 78, "Text",ExpressionUUID->"425aef58-5832-4dd8-be6e-6aa49e0d49ed"],
Cell[111503, 2821, 258, 5, 50, "Input",ExpressionUUID->"b2a1dca7-9202-4ad8-b8b4-26b8cc8fabc8"],
Cell[111764, 2828, 497, 11, 78, "Text",ExpressionUUID->"e803fa59-5295-4002-8b58-4cfafa13698e"],
Cell[112264, 2841, 391, 8, 50, "Input",ExpressionUUID->"2307993f-fb52-4d39-b4b4-fa35cb9970ca"],
Cell[CellGroupData[{
Cell[112680, 2853, 785, 15, 46, "Subsubsubsection",ExpressionUUID->"8858ca86-db85-45f7-8d67-2d8bb17a6545"],
Cell[113468, 2870, 635, 17, 110, "Text",ExpressionUUID->"b22d2cd1-71c9-4472-86ee-d084d168476d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[114152, 2893, 228, 4, 67, "Subsection",ExpressionUUID->"13e3693e-d9c2-4ad3-bf18-b933f0936634"],
Cell[114383, 2899, 392, 8, 77, "Text",ExpressionUUID->"776da484-f736-4748-9cb0-db8c286d46a2"],
Cell[CellGroupData[{
Cell[114800, 2911, 562, 8, 45, "Subsubsubsection",ExpressionUUID->"338f101e-8687-4c12-8556-101b14ef854d"],
Cell[CellGroupData[{
Cell[115387, 2923, 682, 18, 97, "Item",ExpressionUUID->"21308635-4e50-411e-9a40-f4f135ce637a"],
Cell[116072, 2943, 466, 11, 97, "Item",ExpressionUUID->"e3db703f-4eb5-4a9c-a11e-5c61c1371736"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116587, 2960, 779, 11, 45, "Subsubsubsection",ExpressionUUID->"1002f113-ad74-4dd2-b4ec-c8936038a73f"],
Cell[117369, 2973, 3344, 73, 468, "Text",ExpressionUUID->"75e5a849-9cf4-4630-bcef-4cc31c006379"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[120762, 3052, 165, 3, 67, "Subsection",ExpressionUUID->"090cab0c-69ba-43aa-8e7d-7dfd586b30a2"],
Cell[120930, 3057, 382, 9, 107, "Text",ExpressionUUID->"494dfca7-c967-423f-af38-e8c08636deb0"],
Cell[121315, 3068, 646, 16, 83, "Input",ExpressionUUID->"157bd667-adaf-4285-afdd-9a43b2c509ec"],
Cell[121964, 3086, 932, 19, 137, "Text",ExpressionUUID->"1cf20387-08b6-46c2-b18b-2cc93ff1f6d5"],
Cell[122899, 3107, 315, 8, 50, "Input",ExpressionUUID->"d3eeab1a-b261-4069-ae94-6f89e97bbacc"],
Cell[123217, 3117, 344, 8, 47, "Text",ExpressionUUID->"0b08e300-a66b-4e9d-8042-f7ebde8086d2"],
Cell[CellGroupData[{
Cell[123586, 3129, 207, 4, 50, "Input",ExpressionUUID->"3a818f82-40cd-491f-a78b-2e6fc823fb5b"],
Cell[123796, 3135, 222, 4, 50, "Output",ExpressionUUID->"37e6bd4d-56a4-4e05-9880-6ade9366f062"]
}, Open  ]],
Cell[124033, 3142, 339, 8, 47, "Text",ExpressionUUID->"6e1c0722-3307-4011-bf4f-9013a01a105a"],
Cell[CellGroupData[{
Cell[124397, 3154, 231, 5, 50, "Input",ExpressionUUID->"63d6d8a0-aef2-4aff-a882-8304e12755af"],
Cell[124631, 3161, 657, 13, 36, "Message",ExpressionUUID->"bf95e572-13ac-44b9-99e8-4c1d3be0b2b3"],
Cell[125291, 3176, 277, 6, 50, "Output",ExpressionUUID->"99229bac-c94d-4092-ae3b-35750d396c3b"]
}, Open  ]],
Cell[125583, 3185, 359, 8, 47, "Text",ExpressionUUID->"d33e0f95-3ecf-472f-840b-b856ee7e8bf6"],
Cell[125945, 3195, 256, 6, 50, "Input",ExpressionUUID->"7ae4bfcb-343e-4dff-962d-2731b9d2dd4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126238, 3206, 218, 4, 67, "Subsection",ExpressionUUID->"047d6522-5d08-4b8f-bbb2-66ce926a29ce"],
Cell[126459, 3212, 656, 14, 107, "Text",ExpressionUUID->"b0eeeefd-6ee3-4436-a5dd-220a96ab1749"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

